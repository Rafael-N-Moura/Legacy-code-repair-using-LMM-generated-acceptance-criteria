Modernize the code to Java Version 17. Make sure the modernized code obeys the requirements outlined by the tests <tests></tests>


File 1:
<phokUi.java>
import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import javax.swing.event.*;
import java.sql.*;
import java.io.*;

public class PhokUi {
	static JList artists,albums,tracks;
	static TextField dir;
	static Button scan;
	static String msg;
	static Connection conn;	
	static String driver;
	static String url;
	static String db;
	static String user;
	static String pass;
	static JScrollPane artistPanel;
	static JScrollPane albumPanel;
	static JScrollPane trackPanel;
	static ResultSet rs;
	static DefaultListModel artistModel, albumModel, trackModel;
	static JFrame window;
	static JLabel status;
	static Statement populate, popAlbum, popTrack;

	public static void main(String[] args) throws SQLException{
		try {
			driver = new String();
			driver = "com.mysql.jdbc.Driver";
			url = new String();
			url = "jdbc:mysql://localhost/";
			db = new String();
			db = "music";
			user = new String();
			user = "phoku";
			pass = new String();
			pass = "phoku";
			JPanel contentPane = new JPanel();
			contentPane.setLayout(new FlowLayout());
			Label title = new Label("*************************************** PhokU Media Library Lister ***************************************",Label.CENTER);
			contentPane.add(title);
			dir = new TextField(150);
			dir.setText("Browse Directory to list");
			contentPane.add(dir);
			scan = new Button("Scan");
			contentPane.add(scan);
			artistModel = new DefaultListModel();
			albumModel = new DefaultListModel();
			trackModel = new DefaultListModel();
			artists = new JList(artistModel);
			albums = new JList(albumModel);
			tracks = new JList(trackModel);

			/* add items dynamically */
		
			artistPanel = new JScrollPane(artists);
			albumPanel = new JScrollPane(albums);
			trackPanel = new JScrollPane(tracks);
			artists.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			albums.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			tracks.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			window = new JFrame("PhokU Media Library Manager");
			artistPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
			artistPanel.setPreferredSize(new Dimension(250, 250));
			albumPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
			albumPanel.setPreferredSize(new Dimension(250, 250));
			trackPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
			trackPanel.setPreferredSize(new Dimension(250, 250));
			contentPane.add(artistPanel);
			contentPane.add(albumPanel);
			contentPane.add(trackPanel);
			status = new JLabel("Idle");
			contentPane.add(status);
			window.getContentPane().add(contentPane);
			Class.forName(driver).newInstance();
			conn = DriverManager.getConnection(url+db, user, pass);
			System.out.println("Connection formed");
			populate = conn.createStatement();
			popAlbum = conn.createStatement();
			popTrack = conn.createStatement();
			scan.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent ae) {
					System.out.println("Scanning directory...");
					status.setText("Scanning directory....");
					try {
					FileOps oFileOps = new FileOps(dir.getText());
					rs = populate.executeQuery("select distinct(artist) from main");
					while (rs.next()) {
						artistModel.addElement(rs.getString("artist"));
					}
					status.setText("Scan complete.");
					} catch (SQLException e) {System.out.println("SQLException occured in PhokUi");}
				}
			});
			artists.addListSelectionListener(new ListSelectionListener() {
				public void valueChanged(ListSelectionEvent lse) {
					try {
					rs = popAlbum.executeQuery("select distinct(album) from main where artist = '" + artistModel.getElementAt(artists.getSelectedIndex()).toString() + "'");
					trackModel.clear();
					albumModel.clear();
					while (rs.next()) {
						albumModel.addElement(rs.getString("album"));
					}
					} catch (SQLException e) { }
				}
			});
			albums.addListSelectionListener(new ListSelectionListener() {
				public void valueChanged(ListSelectionEvent lse) {
					try {
					rs = popTrack.executeQuery("select track from main where album = '" + albumModel.getElementAt(albums.getSelectedIndex()).toString() + "'");
					trackModel.clear();
					while (rs.next()) {
						trackModel.addElement(rs.getString("track"));
					}
					} catch (SQLException e) { }
				}
			});
		}
		catch (SQLException e) {System.out.println("SQLException caught in PhokUi"); }
		catch (ClassNotFoundException e) {System.out.println("Class not found"); }
		catch (Exception e) {System.out.println("Exception Occured in PhokUi"); }
		window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		window.pack();
		window.show();
	}
}
</phokUi.java>

File 2:
<FileOps.java>
import java.io.*;
import org.blinkenlights.jid3.*;
import org.blinkenlights.jid3.v1.*;
import org.blinkenlights.jid3.v2.*;
import java.sql.*;

/*************************************************************************************************************************
 * The file operations class. Scans the user selected directory recursively for media of MP3 type, retrieves the ID3 Tags
 * and enters the values into the database. 
 * @author: Saahil
 * *************************************************************************************************************************/

class FileOps {
	static Connection conn = null;

	//The constructor. Clears the database, everytime a new parent directory is selected. 
	FileOps(String path) throws SQLException {
		String driver = "com.mysql.jdbc.Driver";
		String url = "jdbc:mysql://localhost/";
		String db = "music";
		String user = "phoku";
		String pass = "phoku";

		try {
			Class.forName(driver).newInstance();
			conn = DriverManager.getConnection(url+db, user, pass);
			Statement stmt = conn.createStatement();
			stmt.executeUpdate("delete from main");
			conn.close();
			getTrackList(path);
		}
		catch (Exception e) {}
	}


	// Scans the directory for MP3 files
	static void getTrackList(String dirPath) throws ID3Exception, IOException, SQLException{
		MediaFile iMediaFile;
		String track = new String();
		String album = new String();
		String artist = new String();
		try {
			File dir = new File(dirPath);
			if (dir.isDirectory()) {
				String[] flList = dir.list();
				int len = flList.length;

				for (int i = 0; i < len; i++) {
					File f = new File(dirPath + "/" + flList[i]);
					String fileName = dirPath + "/" + flList[i];
					if (!f.isDirectory()) {
						if (fileName.endsWith("mp3")){
							iMediaFile = new MP3File(f);
							ID3Tag[] oTags = iMediaFile.getTags();
							if (oTags[0] instanceof ID3V1_0Tag) {
								ID3V1_0Tag oActTag = (ID3V1_0Tag)oTags[0];
								track = oActTag.getTitle();
								album = oActTag.getAlbum();
								artist = oActTag.getArtist();
								insertIntoDb(fileName, track, album, artist);
							}
							else if (oTags[0] instanceof ID3V1_1Tag) {
								ID3V1_1Tag oActTag = (ID3V1_1Tag)oTags[0];
								track = oActTag.getTitle();
								album = oActTag.getAlbum();
								artist = oActTag.getArtist();
								insertIntoDb(fileName, track, album, artist);
							}
						}
					}
					// Recursive call if current File object points to a directory
					else
						getTrackList(fileName);
				}
			}
			else 
				throw new FileNotFoundException();
			
			}
		catch (IOException e) {
			System.out.println("Path doesn't exist or is not a directory");
		}
		catch(ID3Exception e) {System.out.println("Other");}
	}
	
	//Populates the database 
	static void insertIntoDb(String fileName, String track, String album, String artist) throws SQLException  {
		String url = "jdbc:mysql://localhost/";
		String dbName = "music";
		String user = "phoku";
		String pass = "phoku";
		String driver = "com.mysql.jdbc.Driver";
		try {
			Class.forName(driver);
			conn = DriverManager.getConnection(url+dbName, user, pass);
			Statement stmt = conn.createStatement();
			stmt.executeUpdate("Insert into main values ('" + fileName + "', '" + track + "', '" + album + "', '" + artist + "')");
			conn.close();
		}
		catch(ClassNotFoundException e) {}
		catch(SQLException e) {}
		catch(Exception e) {}
	}
	
}

</FileOps.java>

<tests>
Purpose
User Interface (PhokUi.java):
The code builds a simple Swing-based media library manager. It provides a GUI with a text field (for a directory path), a “Scan” button, and three lists (artists, albums, and tracks). When a user clicks the “Scan” button, the application will:
Instantiate a file operations object (FileOps) that clears and then repopulates the database table by scanning the specified directory recursively for MP3 files.
Query the database to list all distinct artists found.
When an artist is selected, query and display the corresponding albums.
When an album is selected, query and display the corresponding tracks.
File Operations (FileOps.java):
This class is responsible for:
Clearing the database table (main) when a new directory is scanned.
Recursively scanning the user-specified directory for files with an “mp3” extension.
Extracting metadata (ID3 tags) from MP3 files using an external library.
Inserting file name, track title, album, and artist into the database.
Inputs and Expected Outputs
Inputs
User-Provided Directory Path:
Entered in the text field. It is expected to be a valid directory that might contain MP3 files (and possibly subdirectories).

Database Connection Details:
Hardcoded connection settings such as:

Driver: "com.mysql.jdbc.Driver"
URL: "jdbc:mysql://localhost/"
Database: "music"
User: "phoku"
Password: "phoku"
Media Files:
Files with an “mp3” extension. The code expects these files to have valid ID3 V1.0 or V1.1 tags that provide the track title, album, and artist.

Expected Outputs
GUI Components:

A window with a title label, a directory text field, and a “Scan” button.
Three scrollable lists for artists, albums, and tracks.
A status label that updates during scanning (e.g., “Scanning directory…”, “Scan complete.”).
Database Updates:

Upon scanning, the database table is first cleared.
For each valid MP3 file, a new record is inserted into the table with the file name, track, album, and artist.
List Population:

After scanning, the artists list should display unique artist names from the database.
Selecting an artist should update the albums list with the distinct albums for that artist.
Selecting an album should update the tracks list with the corresponding track names.
Console Output:

Messages such as “Connection formed” and “Scanning directory…” will be printed to the console.
Detailed Test Scenarios
GUI Initialization and Component Verification:

Scenario: Launch the application.
Test: Verify that the window appears with the expected components:
A title label with the header text.
A text field preset with “Browse Directory to list.”
A “Scan” button.
Three scrollable lists (for artists, albums, and tracks).
A status label initially showing “Idle.”
Valid Directory Scan with MP3 Files:

Scenario: Input a valid directory path that contains MP3 files with correct ID3 tags.
Test:
Click the “Scan” button.
Expected Behavior:
The status label changes to “Scanning directory…”.
The database table is cleared.
The directory is recursively scanned.
For each valid MP3 file found, the corresponding metadata (artist, album, track) is extracted and inserted into the database.
After scanning, the artists list is populated with unique artist names.
Console outputs the “Scanning directory…” and “Scan complete.” messages.
Handling of Non-MP3 Files and Unsupported Files:

Scenario: Use a directory that contains a mix of MP3 and non-MP3 files.
Test:
Confirm that only files ending with “mp3” are processed.
Expected Behavior:
Non-MP3 files are ignored, and only valid MP3 files contribute to the database population.
Recursive Directory Scanning:

Scenario: Input a directory with nested subdirectories that include MP3 files.
Test:
Verify that the code correctly recurses into subdirectories.
Expected Behavior:
All MP3 files, even those in subdirectories, are processed and their metadata is inserted into the database.
Invalid or Non-Existent Directory Input:

Scenario: Enter a path that does not exist or is not a directory.
Test:
Click “Scan.”
Expected Behavior:
The code should throw (and catch) a FileNotFoundException.
A message such as “Path doesn't exist or is not a directory” is printed to the console.
The UI remains responsive and does not crash.
Database Connection and Query Verification:

Scenario: Test with a correctly configured MySQL instance.
Test:
Verify that the connection is successfully established.
Check that SQL queries (for inserting data and for retrieving unique artists, albums, and tracks) execute without errors.
Expected Behavior:
The console prints “Connection formed.”
All queries return the correct results based on the contents of the directory.
List Selection and Dynamic Query Execution:

Scenario 1 (Artist Selection):
Test:
After scanning, select an artist from the artists list.
Expected Behavior:
The albums list is cleared and repopulated with unique albums corresponding to the selected artist.
The tracks list is cleared.
Scenario 2 (Album Selection):
Test:
After selecting an artist, select one of the albums.
Expected Behavior:
The tracks list is cleared and then populated with the tracks corresponding to the selected album.
Handling of Files with Missing or Corrupt ID3 Tags:

Scenario: Process MP3 files that do not have ID3 tags or have corrupt metadata.
Test:
Verify that such cases do not crash the application.
Expected Behavior:
The exception is caught (as seen in the try-catch blocks) and, if possible, the file is skipped without affecting the overall scanning process.
Resource Management and Connection Cleanup:

Scenario: Validate that database connections are managed correctly.
Test:
Confirm that each time a database connection is opened (especially in the insertIntoDb method), it is closed after the operation.
Expected Behavior:
No connection leaks occur; resources are released properly.
Concurrency and Responsiveness:

Scenario: Test the responsiveness of the UI during scanning.
Test:
Monitor whether the UI remains responsive or freezes during a long scan (especially in directories with many files).
Expected Behavior:
The GUI should continue to update (e.g., status messages) even if scanning takes a while.
(Note: If scanning is slow, consider refactoring to run in a separate thread or using SwingWorker in the Java 17 version.)
Migration Considerations for Java 17:

Deprecated API Usage:
Test:
Replace deprecated calls (e.g., window.show()) with their current equivalents (e.g., window.setVisible(true)).
Expected Behavior:
The GUI displays correctly without warnings.
Driver Instantiation:
Test:
Verify if the use of Class.forName(driver).newInstance(); needs to be updated or replaced as per Java 17’s best practices.
Expected Behavior:
The code should run with the Java 17 runtime, possibly using updated database connection practices.
General Language Enhancements:
Test:
Refactor exception handling or lambda expressions to conform to modern Java style.
Expected Behavior:
The functionality remains intact while making use of newer Java features where applicable.
Conclusion
To ensure that the code meets its intended requirements, the testing strategy should include:

GUI Testing: Confirm that all components render and update as expected.
Functional Testing: Validate that directory scanning, MP3 file processing, and database interactions work correctly in all anticipated scenarios.
Edge Case Testing: Check for invalid inputs, missing metadata, and nested directories.
Resource and Exception Handling: Verify that all resources (especially database connections) are properly managed and that the program gracefully handles errors.
Migration Validation: Ensure that all deprecated APIs are updated in the Java 17 transformation without breaking existing functionality.
By systematically running these scenarios, you can verify that the application correctly implements its media library listing functionality and is robust enough for production use under Java 17.
</tests>
ChatGPT said:
Reasoned about Java 17 code modernization for 25 seconds
I need to modernize code to Java 17, using two files: PhokUi.java and FileOps.java. First, I’ll check if it meets the tests and replace deprecated methods, like using setVisible(true) instead of show(). Also, switching to try-with-resources for database connections where possible. I'll need to update the driver for MySQL to "com.mysql.cj.jdbc.Driver", though this isn’t explicitly required in the migration. Additionally, I'll consider replacing anonymous inner classes with lambdas where I can, but I'll watch out for SAM interfaces like ActionListener.

In PhokUi, I'll update the static connection variable used for multiple queries and replace window.show() with window.setVisible(true) as recommended. Also, remove new String() and simplify assignments, using final where appropriate, and var for local variables if it’s useful (Java 10+). For resource management, I’ll use try-with-resources in SQL queries and catch exceptions properly, logging them instead of leaving empty catch blocks. I'll also convert anonymous inner classes like ActionListener and ListSelectionListener to lambdas.

For PhokUi.java, I'll update it by modernizing some parts including using JTextField, JButton, and the MySQL 8+ driver com.mysql.cj.jdbc.Driver. I’ll replace window.show() with window.setVisible(true). I'll update the action listeners to use lambdas and incorporate try-with-resources for database connections. For the FileOps class, I’ll modernize similarly, using try-with-resources where needed for efficient database management. Furthermore, I'll use better exception handling and some other optimizations in both files.

Below are the modernized versions of the two files using Java 17 features such as lambda expressions, try‑with‑resources, updated Swing components, and removal of deprecated API calls. In this version we also use the updated MySQL driver class name and more robust exception reporting.

PhokUi.java

java
Copy
Edit
import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import java.sql.*;

public class PhokUi {
    // Use generics for JList models
    static JList<String> artists, albums, tracks;
    // Use Swing components instead of AWT ones
    static JTextField dir;
    static JButton scan;
    static Connection conn;
    static String driver = "com.mysql.cj.jdbc.Driver"; // Updated driver for Java 17/MySQL Connector/J 8+
    static String url = "jdbc:mysql://localhost/";
    static String db = "music";
    static String user = "phoku";
    static String pass = "phoku";
    static JScrollPane artistPanel, albumPanel, trackPanel;
    static ResultSet rs;
    static DefaultListModel<String> artistModel, albumModel, trackModel;
    static JFrame window;
    static JLabel status;
    static Statement populate, popAlbum, popTrack;

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            try {
                // Create UI components
                JPanel contentPane = new JPanel(new FlowLayout());
                JLabel title = new JLabel("*************************************** PhokU Media Library Lister ***************************************", SwingConstants.CENTER);
                contentPane.add(title);

                dir = new JTextField("Browse Directory to list", 30);
                contentPane.add(dir);
                scan = new JButton("Scan");
                contentPane.add(scan);

                artistModel = new DefaultListModel<>();
                albumModel = new DefaultListModel<>();
                trackModel = new DefaultListModel<>();

                artists = new JList<>(artistModel);
                albums = new JList<>(albumModel);
                tracks = new JList<>(trackModel);

                // Set up scroll panes
                artistPanel = new JScrollPane(artists);
                albumPanel = new JScrollPane(albums);
                trackPanel = new JScrollPane(tracks);
                artists.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                albums.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
                tracks.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

                artistPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
                artistPanel.setPreferredSize(new Dimension(250, 250));
                albumPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
                albumPanel.setPreferredSize(new Dimension(250, 250));
                trackPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
                trackPanel.setPreferredSize(new Dimension(250, 250));

                contentPane.add(artistPanel);
                contentPane.add(albumPanel);
                contentPane.add(trackPanel);

                status = new JLabel("Idle");
                contentPane.add(status);

                window = new JFrame("PhokU Media Library Manager");
                window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                window.getContentPane().add(contentPane);
                window.pack();
                window.setLocationRelativeTo(null);

                // Load the driver and create the connection
                Class.forName(driver);
                conn = DriverManager.getConnection(url + db, user, pass);
                System.out.println("Connection formed");
                populate = conn.createStatement();
                popAlbum = conn.createStatement();
                popTrack = conn.createStatement();

                // Add action listener using a lambda expression
                scan.addActionListener(e -> {
                    System.out.println("Scanning directory...");
                    status.setText("Scanning directory....");
                    try {
                        // Create a FileOps instance to clear and repopulate the DB
                        new FileOps(dir.getText());
                        // Clear existing list models
                        artistModel.clear();
                        albumModel.clear();
                        trackModel.clear();
                        rs = populate.executeQuery("select distinct(artist) from main");
                        while (rs.next()) {
                            artistModel.addElement(rs.getString("artist"));
                        }
                        status.setText("Scan complete.");
                    } catch (SQLException ex) {
                        System.out.println("SQLException occurred in PhokUi: " + ex.getMessage());
                    }
                });

                // List selection listener for artists (using lambda)
                artists.addListSelectionListener(e -> {
                    if (!e.getValueIsAdjusting()) {
                        try {
                            String selectedArtist = artistModel.getElementAt(artists.getSelectedIndex());
                            albumModel.clear();
                            trackModel.clear();
                            rs = popAlbum.executeQuery("select distinct(album) from main where artist = '" + selectedArtist + "'");
                            while (rs.next()) {
                                albumModel.addElement(rs.getString("album"));
                            }
                        } catch (SQLException ex) {
                            System.out.println("SQLException in artist selection: " + ex.getMessage());
                        }
                    }
                });

                // List selection listener for albums (using lambda)
                albums.addListSelectionListener(e -> {
                    if (!e.getValueIsAdjusting()) {
                        try {
                            String selectedAlbum = albumModel.getElementAt(albums.getSelectedIndex());
                            trackModel.clear();
                            rs = popTrack.executeQuery("select track from main where album = '" + selectedAlbum + "'");
                            while (rs.next()) {
                                trackModel.addElement(rs.getString("track"));
                            }
                        } catch (SQLException ex) {
                            System.out.println("SQLException in album selection: " + ex.getMessage());
                        }
                    }
                });

                window.setVisible(true);
            } catch (Exception ex) {
                System.out.println("Exception occurred in PhokUi: " + ex.getMessage());
            }
        });
    }
}
FileOps.java

java
Copy
Edit
import java.io.*;
import org.blinkenlights.jid3.*;
import org.blinkenlights.jid3.v1.*;
import org.blinkenlights.jid3.v2.*;
import java.sql.*;

/*************************************************************************************************************************
 * The file operations class. Scans the user selected directory recursively for MP3 files,
 * retrieves their ID3 tags, and inserts the file name, track title, album, and artist into the database.
 *************************************************************************************************************************/
public class FileOps {

    public FileOps(String path) {
        String driver = "com.mysql.cj.jdbc.Driver";
        String url = "jdbc:mysql://localhost/";
        String db = "music";
        String user = "phoku";
        String pass = "phoku";

        try {
            Class.forName(driver);
            // Use try-with-resources to ensure the connection and statement are closed
            try (Connection conn = DriverManager.getConnection(url + db, user, pass);
                 Statement stmt = conn.createStatement()) {
                stmt.executeUpdate("delete from main");
            }
            getTrackList(path);
        } catch (Exception e) {
            System.out.println("Exception in FileOps constructor: " + e.getMessage());
        }
    }

    // Recursively scans the directory for MP3 files
    static void getTrackList(String dirPath) {
        try {
            File dir = new File(dirPath);
            if (!dir.exists() || !dir.isDirectory()) {
                throw new FileNotFoundException("Path doesn't exist or is not a directory");
            }
            File[] files = dir.listFiles();
            if (files != null) {
                for (File f : files) {
                    if (f.isDirectory()) {
                        getTrackList(f.getAbsolutePath());
                    } else if (f.getName().toLowerCase().endsWith(".mp3")) {
                        try {
                            MediaFile mediaFile = new MP3File(f);
                            ID3Tag[] tags = mediaFile.getTags();
                            if (tags.length > 0) {
                                String track = null;
                                String album = null;
                                String artist = null;
                                if (tags[0] instanceof ID3V1_0Tag) {
                                    ID3V1_0Tag tag = (ID3V1_0Tag) tags[0];
                                    track = tag.getTitle();
                                    album = tag.getAlbum();
                                    artist = tag.getArtist();
                                } else if (tags[0] instanceof ID3V1_1Tag) {
                                    ID3V1_1Tag tag = (ID3V1_1Tag) tags[0];
                                    track = tag.getTitle();
                                    album = tag.getAlbum();
                                    artist = tag.getArtist();
                                }
                                if (track != null && album != null && artist != null) {
                                    insertIntoDb(f.getAbsolutePath(), track, album, artist);
                                }
                            }
                        } catch (ID3Exception | IOException | SQLException ex) {
                            System.out.println("Error processing file " + f.getAbsolutePath() + ": " + ex.getMessage());
                        }
                    }
                }
            }
        } catch (FileNotFoundException ex) {
            System.out.println(ex.getMessage());
        }
    }

    // Inserts the file metadata into the database using try-with-resources
    static void insertIntoDb(String fileName, String track, String album, String artist) {
        String driver = "com.mysql.cj.jdbc.Driver";
        String url = "jdbc:mysql://localhost/";
        String dbName = "music";
        String user = "phoku";
        String pass = "phoku";

        try {
            Class.forName(driver);
            try (Connection conn = DriverManager.getConnection(url + dbName, user, pass);
                 Statement stmt = conn.createStatement()) {
                String query = "INSERT INTO main VALUES ('" + fileName + "', '" + track + "', '" + album + "', '" + artist + "')";
                stmt.executeUpdate(query);
            }
        } catch (Exception e) {
            System.out.println("Error inserting into DB: " + e.getMessage());
        }
    }
}
Key Modernizations and Improvements
Swing Modernization:
• Replaced AWT’s TextField and Button with Swing’s JTextField and JButton.
• Replaced the deprecated window.show() with window.setVisible(true).

Lambda Expressions:
• Converted anonymous inner classes (for action and list selection listeners) into lambda expressions.

Resource Management:
• Utilized try‑with‑resources for database connections and statements to ensure proper cleanup.

Driver Update:
• Updated the MySQL driver class name to com.mysql.cj.jdbc.Driver in line with modern usage.

Robust Exception Handling:
• Enhanced exception reporting with more informative messages to aid debugging.

These updates help ensure the code meets the outlined test scenarios while aligning with modern Java 17 best practices.