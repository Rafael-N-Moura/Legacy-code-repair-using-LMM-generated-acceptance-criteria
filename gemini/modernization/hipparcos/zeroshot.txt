Modernize this code to Java Version 17

File 1:
<Dpoint.java>

/*

Copyright (C) 1997-2016 European Space Agency

This library is free software; you can redistribute it and/or

modify it under the terms of the GNU Lesser General Public

License as published by the Free Software Foundation; either

version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,

but WITHOUT ANY WARRANTY; without even the implied warranty of

MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public

License along with this library; if not, write to the Free Software

Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/
package hipparcos.plot;

public class DPoint {
private double x=0, y=0;
private boolean valid;
private boolean semivalid;

public DPoint(double x, double y) {
valid=true;
semivalid=true;
this.x=x;
this.y=y;
}

public DPoint(DPoint p) {
valid=true;
semivalid=true;
this.x=p.getX();
this.y=p.getY();
}

public DPoint() {
valid=false;
semivalid=false;
}

public boolean isValid() { return valid; };

public double getX() {
return x ;
// should throw an exception here if !valid ...
}

public double getY() {
return y;
}

public void setX(double x) {
this.x= x;
semiValidate();
}

public void setY(double y) {
this.y= y;
semiValidate();
}

private void semiValidate() {
if (!valid) {
valid=semivalid;
semivalid= true;
}
}

public String toString() {
return (""+x+"  "+y);
}
}
</Dpoint.java>

File 2:
<Histogram.java>

/*

Copyright (C) 1997-2016 European Space Agency

This library is free software; you can redistribute it and/or

modify it under the terms of the GNU Lesser General Public

License as published by the Free Software Foundation; either

version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,

but WITHOUT ANY WARRANTY; without even the implied warranty of

MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public

License along with this library; if not, write to the Free Software

Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
/
package hipparcos.plot;
import java.awt.;

public class Histogram extends Plot {

private int occurences[];
private boolean gotOne=false;
private Color plotcol;

public Histogram(String xlabel, String ylabel, int low,int high,
double step, Color col) {
setXlabel(xlabel);
setYlabel(ylabel);
plotcol=col;
init (low, high,step);
}

public void resetGraph() {
miny=0;
maxy=10;
if (occurences != null) {
for (int i = 0; i < occurences.length; i++) {
occurences[i]=0;
};
};
}

public void init(int low,int high, double step) {
gotOne=false;
minx=low;
maxx=high;
miny=0;
maxy=10;
xstep=step;
numberStep=5;
/* we will then split the data in to these groups
which we can just keep in array only interestedin how many
*/
Double nogrps= new Double ((high - low)/ step);
occurences=new int[nogrps.intValue()];
}

public void addOccurence (double o) {
gotOne=true;
int which=0;
double category=minx+xstep;
while ((category < o) && (category < maxx)) {
category = category+xstep;
which++;
}
//System.out.println("o "+o+" "+occurences.length);
while  (which >= occurences.length) which--; // off the end
occurences[which]++; //add one to ocurences for this);
// which may cause us to have to many !!
if (occurences[which] > maxy) {
maxy=occurences[which];
ystep=-1;
}
repaint();

}

public void plotGraph(Graphics g) {
if (gotOne) {
g.setColor(plotcol);
double categ=minx;
for (int i=0; i< occurences.length; i++ ) {
plotBar(categ,occurences[i],g);
categ+=xstep;
}
} else {
g.setColor(Color.red);
g.drawString(" No data",30,(int)(this.getSize().height/2));
};
}

public void plotBar(double cat, int height, Graphics g){
int x = calcX(cat);
int w = calcX(cat+xstep) - x;
int y = calcY(height);
int h = calcY(miny) -y ;
g.fillRect(x,y,w,h);
//System.out.println("x "+x+" y "+y+" w "+w+" h "+h);
}
}
</Histogram.java>

File 3:
<PhasePlot.java>

/*

Copyright (C) 1997-2016 European Space Agency

This library is free software; you can redistribute it and/or

modify it under the terms of the GNU Lesser General Public

License as published by the Free Software Foundation; either

version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,

but WITHOUT ANY WARRANTY; without even the implied warranty of

MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public

License along with this library; if not, write to the Free Software

Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/
package hipparcos.plot;

import java.awt.;
import java.lang.;
import java.util.*;

/** Same as a simple plot but take in a phase */
public class PhasePlot extends SimplePlot {

private double phase;

public PhasePlot(String xlabel, String ylabel, double lowY, double highY, Color col) {
super (xlabel,ylabel,0,1.5,lowY,highY,col);
xstep=0.1;
numberStep=1;
phase=0.5;
}

public void resetGraph() {
super.resetGraph();
xstep=0.5;
numberStep=1;
}

public void plotGraph(Graphics g) {
if (gotOne) {
if (plotZeroLine) plotZero(g);
g.setColor(plotcol);
for (Enumeration e = points.elements() ; e.hasMoreElements() ;) {
DPoint op = (DPoint)e.nextElement() ;
DPoint p = new DPoint(op) ;
double x = ((p.getX()%phase) *(1/phase));
p.setX(x);
plotPoint(p,g);
if (p.getX() <= 0.5) { // plot some points again on the end
p.setX(p.getX()+1);
plotPoint(p,g);
}
}

} else {
    g.setColor(Color.red);
    g.drawString(" No data",30,(int)(this.getSize().height/2));
  };
Use code with caution.
}

public void setPhase(double phase) {
this.phase = phase;
repaint();
}

public double getPhase() {
return phase;
}
}
</PhasePlot.java>

File 4:
<Plot.java>

/*

Copyright (C) 1997-2016 European Space Agency

This library is free software; you can redistribute it and/or

modify it under the terms of the GNU Lesser General Public

License as published by the Free Software Foundation; either

version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,

but WITHOUT ANY WARRANTY; without even the implied warranty of

MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public

License along with this library; if not, write to the Free Software

Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/
package hipparcos.plot;

import java.awt.;
import java.io.;
import java.util.*;

/** Plot just with axes and scale as base class for other plots
like Histogram  **/
public class Plot extends Canvas {

double scaleX,scaleY;
public double minx,miny,maxx,maxy;
public int topRule,bottomRule,leftRule,rightRule,dheight;
public  int ystep=-1,numberStep=5,ynumberStep=5;
public double xstep=-1;
public int pointSize=4;
private String botText,leftText;
private boolean inited=false;

private void init() {
topRule=20;
bottomRule=30;
rightRule=20;
leftRule=25;
setBackground(Color.white);
minx=0;
maxx=10;
miny=0;
maxy=10;
botText=new String ("X axis");
leftText=new String ("Y axis");
inited=true;
}

public Plot () {
init();
}

public void setScales() {
Dimension d = this.getSize();
int gWidth = (int) d.width  - leftRule - rightRule ;
int gHeight = (int) d.height -  bottomRule -topRule;
dheight=gHeight;
scaleX= (maxx - minx)/gWidth;
scaleY= (maxy - miny)/gHeight;
if (xstep<=-1) {xstep=getStep(scaleX); numberStep=getNumberStep(scaleX);}
if (ystep==-1) {ystep=getStep(scaleY); ynumberStep=getNumberStep(scaleY);}
//System.out.println (" ScaleX "+scaleX+" ScaleY "+scaleY +" Height "+dheight);
}

public int getStep(double scale) {
/** how often to put a tick mark depending on scale */
int ret=1;
if (scale <= 2 ) {ret=50;  };
if (scale <= 1 ) {ret=10 ;};
if (scale < .1 ) {ret=1 ;};
return ret;
}

public int getNumberStep(double scale) {
int ret=1;
if (scale <= 2 ) {ret=50;  };
if (scale <= 1 ) {ret=10 ; };
if (scale < .1 ) {ret=5 ;};
return ret;
}
public void paint (Graphics g) {

if (!inited) init();
drawRulers(g);
plotGraph(g);
Use code with caution.
}

public void plotGraph( Graphics g) {
/** Override this one in subclasses to do your thing*/
g.setColor(Color.red);
g.drawString(" Not Implemented",30,(int)(this.getSize().height/2));
}

public int calcX(double d) {
Double ret=new Double(leftRule+((d - minx)/scaleX));
return ( ret.intValue() );
}
public int calcY(double d) {
Double ret=new Double((d- miny)/scaleY);
return ( topRule + dheight - ret.intValue() );
}

private void drawRulers (Graphics g)  {
String ly,hy,st;
int cShift=9;
int highY,lowY,lowX,highX,tick;
double dtick;
int posLowY,posHighY,step,posLowX,posHighX;

setScales();

 Float stF;
Use code with caution.
// ystuff
stF = new Float(maxy + (maxy%ystep));
highY =  stF.intValue();
stF = new Float(miny - (miny%ystep));
lowY = stF.intValue();
posHighY= calcY(highY) + (cShift/2);
posLowY= calcY(lowY) + (cShift/2);
//System.out.println("Min Y "+miny+" lowY "+lowY +" PoslowY "+posLowY);
//System.out.println("Max Y "+maxy+" highY "+highY +" posHighY "+posHighY);
// x stuff
stF = new Float(maxx - (maxx%xstep));
highX = stF.intValue();
stF = new Float(minx  - (minx%xstep));
lowX = stF.intValue();
posHighX=  calcX(highX) -(cShift/2);
posLowX= calcX(lowX) - cShift;
// X and Y axis and Scale (Netscape seems to have a big problem
// with strings hence the rather over kill appraoch here
g.setColor(Color.black);
g.drawString(leftText,1,12);
Dimension d = this.getSize();
Double center= new Double ((d.width/2) - ((botText.length()/2)*7));
g.drawString(botText,center.intValue(),d.height - (cShift/2));
g.drawLine (leftRule-1,topRule,leftRule-1,d.height-bottomRule);
g.drawLine (leftRule-1,d.height-bottomRule,d.width-rightRule,d.height-bottomRule);

tick = lowY - (lowY%ystep);
 int endTick = highY - (highY%ystep); 
 while (tick <= endTick) {
     int posTick= calcY(tick);
 g.drawLine(leftRule-5,posTick, leftRule,posTick);
 if (tick%ynumberStep==0) g.drawString(""+tick,3,(posTick+(cShift/2)));
 tick+=ystep;
 }

 // ticks on X
 dtick = lowX - (lowX%xstep);
 endTick = (int) (highX - (highX%xstep)); 
 while (dtick <= endTick) {
     int posTick= calcX(dtick);
 g.drawLine(posTick,(d.height -bottomRule), posTick, (d.height -bottomRule +5));
 if (dtick%numberStep==0) {
     Double t = new Double (dtick);
     g.drawString(""+t.intValue(),(posTick-(cShift/2)),(d.height - 14));
 }
 dtick+=xstep;
 }
Use code with caution.
}

public void setXlabel(String l) {
botText=l;
}
public void setYlabel(String l) {
leftText=l;
}

public void plotPoint(double rx, double ry, Graphics g){
int x = calcX(rx);
int y = calcY(ry);
//System.out.println("Plotting "+x+", "+y);
Double offd = new Double(pointSize/2);
int off = offd.intValue();
g.fillOval((x-off),(y-off),pointSize,pointSize);
}

public void plotPoint(DPoint p, Graphics g){
plotPoint(p.getX(),p.getY(),g);
}

}
</Plot.java>

File 5:
<SimplePlot.java>

/*

Copyright (C) 1997-2016 European Space Agency

This library is free software; you can redistribute it and/or

modify it under the terms of the GNU Lesser General Public

License as published by the Free Software Foundation; either

version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,

but WITHOUT ANY WARRANTY; without even the implied warranty of

MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU

Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public

License along with this library; if not, write to the Free Software

Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/
package hipparcos.plot;

import java.awt.;
import java.lang.;
import java.util.*;

/* Just plots points on a grpah - nothing fancy. Need to supply the
max and min when setting up */
public class SimplePlot extends Plot {

public Vector points;
public boolean gotOne=false;
public Color plotcol;
public boolean plotZeroLine=true;
static public Color zeroLineColor=new Color(255,105,255);

public SimplePlot(String xlabel, String ylabel, double lowX,double highX,
double lowY, double highY, Color col) {
setXlabel(xlabel);
setYlabel(ylabel);
plotcol=col;
init (lowX, highX, lowY, highY);
}

public void resetGraph() {
points=new Vector();
}

public void init(double lowX,double highX, double lowY, double highY) {
gotOne=false;
minx=lowX;
maxx=highX;
miny=lowY;
maxy=highY;
xstep=1;
ystep=1;
numberStep=1;
ynumberStep=5;
points=new Vector();
}

public void addPoint (DPoint p ) {
gotOne=true;
if (points != null) points.addElement(p);
repaint();
}

public void plotGraph(Graphics g) {
if (gotOne && (points != null)) {
if (plotZeroLine) plotZero(g);
g.setColor(plotcol);
for (Enumeration e = points.elements() ; e.hasMoreElements() ;) {
DPoint p = (DPoint)e.nextElement() ;
plotPoint(p,g);
}

} else {
    g.setColor(Color.red);
    g.drawString(" No data",30,(int)(this.getSize().height/2));
  };
Use code with caution.
}

public void plotZero( Graphics g) {
int y1= calcY(0);
int x1= calcX(minx);
int y2= y1;
int x2= calcX(maxx);
int xi= calcX(minx);
g.setColor(zeroLineColor);
g.drawLine(x1,y1,x2,y2);
}
}
</SimplePlot.java>

Thoughts
*The thoughts produced by the model are experimental
experiment
The user wants to modernize Java code to Java 17.
This means I need to review the code and apply modern Java features where appropriate.
I should focus on:

Records: Check if any classes can be converted to records. DPoint seems like a good candidate.

Switch expressions: Although not present in the code, it's good to keep in mind for general modernization. Not applicable here.

Text blocks: No large string literals, so not applicable.

Sealed classes: Not applicable here.

Pattern matching for instanceof: Not applicable here.

Remove redundant new Double() and new Float(): Use Double.valueOf() or Float.valueOf() or simply autoboxing.

Use generics for collections: Vector is used, it should be replaced with ArrayList and use generics. Enumeration should be replaced with Iterator or enhanced for loop.

Remove unnecessary semicolons at the end of methods.

Consider using try-with-resources if there are resources to close. Not applicable here.

Check for any deprecated methods and replace them. No deprecated methods are apparent in this code.

Enhance readability and maintainability.

Let's go file by file and apply these changes.

File 1: Dpoint.java

DPoint is a good candidate for a record as it's mainly a data holder.

valid and semivalid flags and semiValidate method seem a bit odd. Let's try to understand their purpose.

valid indicates if the point is valid or not.

semivalid seems to be used to transition from invalid to valid.

The logic is a bit complex, let's see if it's actually used and if it can be simplified or removed.

For now, let's keep the logic as is and convert it to a record, but we should flag this for potential simplification.

Convert to record, keep valid and semivalid for now, use compact constructor if possible, remove getters and setters if record. But DPoint needs to be mutable through setX and setY, so record might not be the best fit directly.

Let's stick with a class but make it more concise with Java 17 features.

File 2: Histogram.java

Use generics for occurences if possible? No, occurences is int[].

Replace new Double() with Double.valueOf() or just double division.

Replace repaint() with invalidate() and repaint() if needed, but repaint() is fine here.

Enhanced for loop for array iteration.

File 3: PhasePlot.java

No significant changes needed apart from using enhanced for loop and potentially simplifying points to List<DPoint>.

File 4: Plot.java

Replace new Double() and new Float() with Double.valueOf() or Float.valueOf() or autoboxing.

No other major changes needed.

File 5: SimplePlot.java

Replace Vector with ArrayList<DPoint>.

Replace Enumeration with Iterator or enhanced for loop.

No other significant changes.

Let's start implementing the changes.

DPoint.java - First attempt as record (Rejected)

package hipparcos.plot;

public record DPoint(double x, double y, boolean valid, boolean semivalid) {

    public DPoint(double x, double y) {
        this(x, y, true, true);
    }

    public DPoint(DPoint p) {
        this(p.x(), p.y(), true, true);
    }

    public DPoint() {
        this(0, 0, false, false);
    }

    public boolean isValid() {
        return valid;
    }

    public void setX(double x) {
        // Cannot modify record fields directly. Need to rethink mutability.
        // This won't work with record directly because records are immutable.
        // We need to keep it as a class for setX and setY to work.
    }
    // ... rest of the methods
}
Use code with caution.
Java
Rejected because DPoint needs to be mutable. Keep it as class.

DPoint.java - Class approach

Use concise constructor.

Keep existing logic.

Histogram.java

Replace new Double with direct calculation.

Enhanced for loop for occurences array reset.

PhasePlot.java

Replace Enumeration with enhanced for loop for points.

Plot.java

Replace new Double and new Float with direct calculation or valueOf.

SimplePlot.java

Replace Vector with ArrayList<DPoint>.

Replace Enumeration with enhanced for loop for points.

Let's proceed with these changes. After applying the changes, review again and make sure no regressions and improvements are made.

Collapse to hide model thoughts
6.7s
<Dpoint.java>
/*
* Copyright (C) 1997-2016 European Space Agency
*
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License as published by the Free Software Foundation; either
* version 2.1 of the License, or (at your option) any later version.
*
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/
package hipparcos.plot;

public class DPoint {
   private double x=0, y=0;
   private boolean valid;
   private boolean semivalid;

   public DPoint(double x, double y) {
	this.valid=true;
	this.semivalid=true;
	this.x=x;
	this.y=y;
   }

   public DPoint(DPoint p) {
	this.valid=true;
	this.semivalid=true;
	this.x=p.getX();
	this.y=p.getY();
   }

   public DPoint() {
	this.valid=false;
	this.semivalid=false;
   }

   public boolean isValid() { return valid; }

   public double getX() {
     return x ;
// should throw an exception here if !valid ...
   }

   public double getY() {
      return y;
   }

   public void setX(double x) {
      this.x= x;
      semiValidate();
   }

   public void setY(double y) {
      this.y= y;
      semiValidate();
   }

   private void semiValidate() {
	if (!valid) {
	   valid=semivalid;
	   semivalid= true;
	}
   }

   @Override
   public String toString() {
	return (""+x+"  "+y);
   }
}
Use code with caution.
Java
<Histogram.java>
/*
* Copyright (C) 1997-2016 European Space Agency
*
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License as published by the Free Software Foundation; either
* version 2.1 of the License, or (at your option) any later version.
*
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/
package hipparcos.plot;
import java.awt.*;
import java.util.Arrays;

public class Histogram extends Plot {

   private int[] occurences;
   private boolean gotOne=false;
   private Color plotcol;

   public Histogram(String xlabel, String ylabel, int low,int high,
				double step, Color col) {
	setXlabel(xlabel);
	setYlabel(ylabel);
	plotcol=col;
	init (low, high,step);
   }

   @Override
   public void resetGraph() {
	miny=0;
	maxy=10;
	if (occurences != null) {
	   Arrays.fill(occurences, 0);
	}
   }

   public void init(int low,int high, double step) {
	gotOne=false;
	minx=low;
	maxx=high;
	miny=0;
	maxy=10;
	xstep=step;
	numberStep=5;
	/* we will then split the data in to these groups
	   which we can just keep in array only interestedin how many
	*/
	int nogrps= (int) ((high - low)/ step);
	occurences=new int[nogrps];
   }

   public void addOccurence (double o) {
	gotOne=true;
	int which=0;
	double category=minx+xstep;
	while ((category < o) && (category < maxx)) {
		category = category+xstep;
		which++;
	}
	//System.out.println("o "+o+" "+occurences.length);
	while  (which >= occurences.length) which--; // off the end
	occurences[which]++; //add one to ocurences for this);
	// which may cause us to have to many !!
	if (occurences[which] > maxy) {
	   maxy=occurences[which];
	   ystep=-1;
	}
	repaint();

   }

   @Override
   public void plotGraph(Graphics g) {
      if (gotOne) {
        g.setColor(plotcol);
	double categ=minx;
	for (int occurence : occurences) {
	    plotBar(categ,occurence,g);
	    categ+=xstep;
	}
      } else {
        g.setColor(Color.red);
        g.drawString(" No data",30,(int)(this.getSize().height/2));
      }
   }

   public void plotBar(double cat, int height, Graphics g){
	int x = calcX(cat);
	int w = calcX(cat+xstep) - x;
	int y = calcY(height);
	int h = calcY(miny) -y ;
	g.fillRect(x,y,w,h);
	//System.out.println("x "+x+" y "+y+" w "+w+" h "+h);
   }
}
Use code with caution.
Java
<PhasePlot.java>
/*
* Copyright (C) 1997-2016 European Space Agency
*
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License as published by the Free Software Foundation; either
* version 2.1 of the License, or (at your option) any later version.
*
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/
package hipparcos.plot;

import java.awt.*;
import java.util.List;


/** Same as a simple plot but take in a phase */
public class PhasePlot extends SimplePlot {

   private double phase;

   public PhasePlot(String xlabel, String ylabel, double lowY, double highY, Color col) {
	super (xlabel,ylabel,0,1.5,lowY,highY,col);
	xstep=0.1;
	numberStep=1;
  	phase=0.5;
   }

   @Override
   public void resetGraph() {
	super.resetGraph();
	xstep=0.5;
	numberStep=1;
   }

   @Override
   public void plotGraph(Graphics g) {
      if (gotOne) {
	if (plotZeroLine) plotZero(g);
        g.setColor(plotcol);
        for (DPoint op : points) {
                DPoint p = new DPoint(op) ;
		double x = ((p.getX()%phase) *(1/phase));
		p.setX(x);
		plotPoint(p,g);
		if (p.getX() <= 0.5) { // plot some points again on the end
		   p.setX(p.getX()+1);
		   plotPoint(p,g);
		}
        }

      } else {
        g.setColor(Color.red);
        g.drawString(" No data",30,(int)(this.getSize().height/2));
      }
   }

   public void setPhase(double phase) {
      this.phase = phase;
      repaint();
  }

  public double getPhase() {
	return phase;
  }
}
Use code with caution.
Java
<Plot.java>
/*
* Copyright (C) 1997-2016 European Space Agency
*
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License as published by the Free Software Foundation; either
* version 2.1 of the License, or (at your option) any later version.
*
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/
package hipparcos.plot;

import java.awt.*;


/** Plot just with axes and scale as base class for other plots
    like Histogram  **/
public class Plot extends Canvas {

  double scaleX,scaleY;
  public double minx,miny,maxx,maxy;
  public int topRule,bottomRule,leftRule,rightRule,dheight;
  public  int ystep=-1,numberStep=5,ynumberStep=5;
  public double xstep=-1;
  public int pointSize=4;
  private String botText,leftText;
  private boolean inited=false;

  private void init() {
	topRule=20;
 	bottomRule=30;
 	rightRule=20;
	leftRule=25;
 	setBackground(Color.white);
	minx=0;
	maxx=10;
	miny=0;
	maxy=10;
	botText=new String ("X axis");
	leftText=new String ("Y axis");
	inited=true;
  }

  public Plot () {
	init();
  }

  public void setScales() {
    Dimension d = this.getSize();
    int gWidth = d.width  - leftRule - rightRule ;
    int gHeight = d.height -  bottomRule -topRule;
    dheight=gHeight;
    scaleX= (maxx - minx)/(double)gWidth;
    scaleY= (maxy - miny)/(double)gHeight;
    if (xstep<=-1) {xstep=getStep(scaleX); numberStep=getNumberStep(scaleX);}
    if (ystep==-1) {ystep=getStep(scaleY); ynumberStep=getNumberStep(scaleY);}
    //System.out.println (" ScaleX "+scaleX+" ScaleY "+scaleY +" Height "+dheight);
  }

  public int getStep(double scale) {
  /** how often to put a tick mark depending on scale */
     int ret=1;
     if (scale <= 2 ) {ret=50;  }
     if (scale <= 1 ) {ret=10 ;}
     if (scale < .1 ) {ret=1 ;}
     return ret;
  }

 public int getNumberStep(double scale) {
     int ret=1;
     if (scale <= 2 ) {ret=50;  }
     if (scale <= 1 ) {ret=10 ; }
     if (scale < .1 ) {ret=5 ;}
     return ret;
 }
  @Override
  public void paint (Graphics g) {

	if (!inited) init();
	drawRulers(g);
	plotGraph(g);
  }

@Override
public void plotGraph( Graphics g) {
/** Override this one in subclasses to do your thing*/
	g.setColor(Color.red);
	g.drawString(" Not Implemented",30,(int)(this.getSize().height/2));
}

public int calcX(double d) {
	return (int) (leftRule+((d - minx)/scaleX));
}
public int calcY(double d) {
	return ( topRule + dheight - (int)((d- miny)/scaleY) );
}

private void drawRulers (Graphics g)  {
     String ly,hy,st;
     int cShift=9;
     int highY,lowY,lowX,highX,tick;
     double dtick;
     int posLowY,posHighY,step,posLowX,posHighX;

     setScales();


   // ystuff
     highY =  (int) (maxy + (maxy%ystep));
     lowY = (int) (miny - (miny%ystep));
     posHighY= calcY(highY) + (cShift/2);
     posLowY= calcY(lowY) + (cShift/2);
//System.out.println("Min Y "+miny+" lowY "+lowY +" PoslowY "+posLowY);
//System.out.println("Max Y "+maxy+" highY "+highY +" posHighY "+posHighY);
    // x stuff
     highX = (int) (maxx - (maxx%xstep));
     lowX = (int) (minx  - (minx%xstep));
     posHighX=  calcX(highX) -(cShift/2);
     posLowX= calcX(lowX) - cShift;
     // X and Y axis and Scale (Netscape seems to have a big problem
     // with strings hence the rather over kill appraoch here
     g.setColor(Color.black);
     g.drawString(leftText,1,12);
     Dimension d = this.getSize();
     int center= (int) ((d.width/2) - ((botText.length()/2)*7));
     g.drawString(botText,center,d.height - (cShift/2));
     g.drawLine (leftRule-1,topRule,leftRule-1,d.height-bottomRule);
     g.drawLine (leftRule-1,d.height-bottomRule,d.width-rightRule,d.height-bottomRule);

     tick = lowY - (lowY%ystep);
     int endTick = highY - (highY%ystep);
     while (tick <= endTick) {
         int posTick= calcY(tick);
	 g.drawLine(leftRule-5,posTick, leftRule,posTick);
	 if (tick%ynumberStep==0) g.drawString(""+tick,3,(posTick+(cShift/2)));
	 tick+=ystep;
     }

     // ticks on X
     dtick = lowX - (lowX%xstep);
     endTick = (int) (highX - (highX%xstep));
     while (dtick <= endTick) {
         int posTick= calcX(dtick);
	 g.drawLine(posTick,(d.height -bottomRule), posTick, (d.height -bottomRule +5));
	 if (dtick%numberStep==0) {
	     g.drawString(""+(int)dtick,(posTick-(cShift/2)),(d.height - 14));
	 }
	 dtick+=xstep;
     }
}

public void setXlabel(String l) {
   botText=l;
}
public void setYlabel(String l) {
   leftText=l;
}

   public void plotPoint(double rx, double ry, Graphics g){
        int x = calcX(rx);
        int y = calcY(ry);
	//System.out.println("Plotting "+x+", "+y);
	int off = pointSize/2;
	g.fillOval((x-off),(y-off),pointSize,pointSize);
   }

   public void plotPoint(DPoint p, Graphics g){
        plotPoint(p.getX(),p.getY(),g);
   }

}
Use code with caution.
Java
<SimplePlot.java>
/*
* Copyright (C) 1997-2016 European Space Agency
*
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License as published by the Free Software Foundation; either
* version 2.1 of the License, or (at your option) any later version.
*
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public
* License along with this library; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
*/
package hipparcos.plot;

import java.awt.*;
import java.util.ArrayList;
import java.util.List;


/* Just plots points on a grpah - nothing fancy. Need to supply the
   max and min when setting up */
public class SimplePlot extends Plot {

   public List<DPoint> points;
   public boolean gotOne=false;
   public Color plotcol;
   public boolean plotZeroLine=true;
   static public Color zeroLineColor=new Color(255,105,255);

   public SimplePlot(String xlabel, String ylabel, double lowX,double highX,
	double lowY, double highY, Color col) {
	setXlabel(xlabel);
	setYlabel(ylabel);
	plotcol=col;
	init (lowX, highX, lowY, highY);
   }

   @Override
   public void resetGraph() {
	points=new ArrayList<>();
   }

   public void init(double lowX,double highX, double lowY, double highY) {
	gotOne=false;
	minx=lowX;
	maxx=highX;
	miny=lowY;
	maxy=highY;
	xstep=1;
	ystep=1;
	numberStep=1;
	ynumberStep=5;
	points=new ArrayList<>();
   }

   public void addPoint (DPoint p ) {
	gotOne=true;
	if (points != null) points.add(p);
	repaint();
   }

   @Override
   public void plotGraph(Graphics g) {
      if (gotOne && (points != null)) {
	if (plotZeroLine) plotZero(g);
        g.setColor(plotcol);
        for (DPoint p : points) {
		plotPoint(p,g);
        }

      } else {
        g.setColor(Color.red);
        g.drawString(" No data",30,(int)(this.getSize().height/2));
      }
   }

   public void plotZero( Graphics g) {
	int y1= calcY(0);
	int x1= calcX(minx);
	int y2= y1;
	int x2= calcX(maxx);
	int xi= calcX(minx);
	g.setColor(zeroLineColor);
	g.drawLine(x1,y1,x2,y2);
   }
}