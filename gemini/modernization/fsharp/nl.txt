Modernize the code to Java Version 17. Make sure the modernized code obeys the requirements outlined by the tests <tests></tests>

File 1:
<phokUi.java>
import java.awt.;
import javax.swing.;
import java.awt.event.;
import javax.swing.event.;
import java.sql.;
import java.io.;

public class PhokUi {
static JList artists,albums,tracks;
static TextField dir;
static Button scan;
static String msg;
static Connection conn;
static String driver;
static String url;
static String db;
static String user;
static String pass;
static JScrollPane artistPanel;
static JScrollPane albumPanel;
static JScrollPane trackPanel;
static ResultSet rs;
static DefaultListModel artistModel, albumModel, trackModel;
static JFrame window;
static JLabel status;
static Statement populate, popAlbum, popTrack;

public static void main(String[] args) throws SQLException{
	try {
		driver = new String();
		driver = "com.mysql.jdbc.Driver";
		url = new String();
		url = "jdbc:mysql://localhost/";
		db = new String();
		db = "music";
		user = new String();
		user = "phoku";
		pass = new String();
		pass = "phoku";
		JPanel contentPane = new JPanel();
		contentPane.setLayout(new FlowLayout());
		Label title = new Label("*************************************** PhokU Media Library Lister ***************************************",Label.CENTER);
		contentPane.add(title);
		dir = new TextField(150);
		dir.setText("Browse Directory to list");
		contentPane.add(dir);
		scan = new Button("Scan");
		contentPane.add(scan);
		artistModel = new DefaultListModel();
		albumModel = new DefaultListModel();
		trackModel = new DefaultListModel();
		artists = new JList(artistModel);
		albums = new JList(albumModel);
		tracks = new JList(trackModel);

		/* add items dynamically */
	
		artistPanel = new JScrollPane(artists);
		albumPanel = new JScrollPane(albums);
		trackPanel = new JScrollPane(tracks);
		artists.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		albums.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		tracks.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		window = new JFrame("PhokU Media Library Manager");
		artistPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		artistPanel.setPreferredSize(new Dimension(250, 250));
		albumPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		albumPanel.setPreferredSize(new Dimension(250, 250));
		trackPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		trackPanel.setPreferredSize(new Dimension(250, 250));
		contentPane.add(artistPanel);
		contentPane.add(albumPanel);
		contentPane.add(trackPanel);
		status = new JLabel("Idle");
		contentPane.add(status);
		window.getContentPane().add(contentPane);
		Class.forName(driver).newInstance();
		conn = DriverManager.getConnection(url+db, user, pass);
		System.out.println("Connection formed");
		populate = conn.createStatement();
		popAlbum = conn.createStatement();
		popTrack = conn.createStatement();
		scan.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ae) {
				System.out.println("Scanning directory...");
				status.setText("Scanning directory....");
				try {
				FileOps oFileOps = new FileOps(dir.getText());
				rs = populate.executeQuery("select distinct(artist) from main");
				while (rs.next()) {
					artistModel.addElement(rs.getString("artist"));
				}
				status.setText("Scan complete.");
				} catch (SQLException e) {System.out.println("SQLException occured in PhokUi");}
			}
		});
		artists.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent lse) {
				try {
				rs = popAlbum.executeQuery("select distinct(album) from main where artist = '" + artistModel.getElementAt(artists.getSelectedIndex()).toString() + "'");
				trackModel.clear();
				albumModel.clear();
				while (rs.next()) {
					albumModel.addElement(rs.getString("album"));
				}
				} catch (SQLException e) { }
			}
		});
		albums.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent lse) {
				try {
				rs = popTrack.executeQuery("select track from main where album = '" + albumModel.getElementAt(albums.getSelectedIndex()).toString() + "'");
				trackModel.clear();
				while (rs.next()) {
					trackModel.addElement(rs.getString("track"));
				}
				} catch (SQLException e) { }
			}
		});
	}
	catch (SQLException e) {System.out.println("SQLException caught in PhokUi"); }
	catch (ClassNotFoundException e) {System.out.println("Class not found"); }
	catch (Exception e) {System.out.println("Exception Occured in PhokUi"); }
	window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	window.pack();
	window.show();
}
Use code with caution.
}
</phokUi.java>

File 2:
<FileOps.java>
import java.io.;
import org.blinkenlights.jid3.;
import org.blinkenlights.jid3.v1.;
import org.blinkenlights.jid3.v2.;
import java.sql.*;

/*************************************************************************************************************************

The file operations class. Scans the user selected directory recursively for media of MP3 type, retrieves the ID3 Tags

and enters the values into the database.

@author: Saahil

*************************************************************************************************************************/

class FileOps {
static Connection conn = null;

//The constructor. Clears the database, everytime a new parent directory is selected. 
FileOps(String path) throws SQLException {
	String driver = "com.mysql.jdbc.Driver";
	String url = "jdbc:mysql://localhost/";
	String db = "music";
	String user = "phoku";
	String pass = "phoku";

	try {
		Class.forName(driver).newInstance();
		conn = DriverManager.getConnection(url+db, user, pass);
		Statement stmt = conn.createStatement();
		stmt.executeUpdate("delete from main");
		conn.close();
		getTrackList(path);
	}
	catch (Exception e) {}
}


// Scans the directory for MP3 files
static void getTrackList(String dirPath) throws ID3Exception, IOException, SQLException{
	MediaFile iMediaFile;
	String track = new String();
	String album = new String();
	String artist = new String();
	try {
		File dir = new File(dirPath);
		if (dir.isDirectory()) {
			String[] flList = dir.list();
			int len = flList.length;

			for (int i = 0; i < len; i++) {
				File f = new File(dirPath + "/" + flList[i]);
				String fileName = dirPath + "/" + flList[i];
				if (!f.isDirectory()) {
					if (fileName.endsWith("mp3")){
						iMediaFile = new MP3File(f);
						ID3Tag[] oTags = iMediaFile.getTags();
						if (oTags[0] instanceof ID3V1_0Tag) {
							ID3V1_0Tag oActTag = (ID3V1_0Tag)oTags[0];
							track = oActTag.getTitle();
							album = oActTag.getAlbum();
							artist = oActTag.getArtist();
							insertIntoDb(fileName, track, album, artist);
						}
						else if (oTags[0] instanceof ID3V1_1Tag) {
							ID3V1_1Tag oActTag = (ID3V1_1Tag)oTags[0];
							track = oActTag.getTitle();
							album = oActTag.getAlbum();
							artist = oActTag.getArtist();
							insertIntoDb(fileName, track, album, artist);
						}
					}
				}
				// Recursive call if current File object points to a directory
				else
					getTrackList(fileName);
			}
		}
		else 
			throw new FileNotFoundException();
		
		}
	catch (IOException e) {
		System.out.println("Path doesn't exist or is not a directory");
	}
	catch(ID3Exception e) {System.out.println("Other");}
}

//Populates the database 
static void insertIntoDb(String fileName, String track, String album, String artist) throws SQLException  {
	String url = "jdbc:mysql://localhost/";
	String dbName = "music";
	String user = "phoku";
	String pass = "phoku";
	String driver = "com.mysql.jdbc.Driver";
	try {
		Class.forName(driver);
		conn = DriverManager.getConnection(url+dbName, user, pass);
		Statement stmt = conn.createStatement();
		stmt.executeUpdate("Insert into main values ('" + fileName + "', '" + track + "', '" + album + "', '" + artist + "')");
		conn.close();
	}
	catch(ClassNotFoundException e) {}
	catch(SQLException e) {}
	catch(Exception e) {}
}
Use code with caution.
}

</FileOps.java>

<tests>
Verification Scenarios:

Here are detailed scenarios to verify the code's functionality:

Basic GUI Functionality and Initialization:

Scenario 1.1: Application Startup and Initial State

Preconditions: MySQL server is running, "music" database exists with user "phoku" and password "phoku", and the "main" table exists (schema is not strictly defined in the code, but assumed to have columns for filename, track, album, artist).

Steps:

Run PhokUi.java.

Expected Output:

The "PhokU Media Library Manager" window appears.

The window contains the title, directory TextField with default text "Browse Directory to list", "Scan" button, empty artist, album, and track lists, and status label showing "Idle".

"Connection formed" is printed to the console, indicating successful database connection at startup.

Directory Scanning and Database Population (Positive Cases):

Scenario 2.1: Scanning a Directory with MP3 Files (ID3v1.0 Tags)

Preconditions:

MySQL database and server are running.

The "main" table in the "music" database is empty.

A test directory exists containing several MP3 files with valid ID3v1.0 tags (artist, album, track).

Steps:

Enter the path to the test directory in the TextField.

Click the "Scan" button.

Expected Output:

Status label changes to "Scanning directory....", then to "Scan complete.".

The artists JList is populated with distinct artist names extracted from the ID3v1.0 tags of the MP3 files in the scanned directory.

The "main" table in the "music" database is populated with records corresponding to each MP3 file, including filename, track, album, and artist extracted from ID3v1.0 tags.

Scenario 2.2: Scanning a Directory with MP3 Files (ID3v1.1 Tags)

Preconditions: Similar to 2.1, but MP3 files should have valid ID3v1.1 tags.

Steps: Same as 2.1.

Expected Output: Similar to 2.1, but data is extracted from ID3v1.1 tags.

Scenario 2.3: Scanning a Directory with Mixed ID3v1.0 and ID3v1.1 Tags

Preconditions: Similar to 2.1, but the test directory contains MP3 files with both ID3v1.0 and ID3v1.1 tags.

Steps: Same as 2.1.

Expected Output: Similar to 2.1, correctly extracts and processes tags from both ID3 versions.

Scenario 2.4: Scanning a Directory with Subdirectories containing MP3 Files

Preconditions: Similar to 2.1, but the test directory contains subdirectories, and MP3 files are located in both the main directory and subdirectories.

Steps: Same as 2.1.

Expected Output: Similar to 2.1, the application should recursively scan subdirectories and include MP3 files from all levels in the database.

Directory Scanning and Database Population (Negative/Edge Cases):

Scenario 3.1: Scanning an Empty Directory

Preconditions: MySQL database is running, "main" table is empty, and an empty directory exists.

Steps:

Enter the path to the empty directory.

Click "Scan".

Expected Output:

Status label changes to "Scanning directory...." then "Scan complete.".

The artists JList remains empty.

The "main" table in the "music" database remains empty (or only contains data from previous scans if not cleared properly, which would be a bug, the code should clear it).

Scenario 3.2: Scanning a Directory with No MP3 Files

Preconditions: MySQL database running, "main" table empty, directory exists but contains no MP3 files.

Steps:

Enter path to the directory.

Click "Scan".

Expected Output:

Status label changes to "Scanning directory...." then "Scan complete.".

The artists JList remains empty.

The "main" table in the "music" database should be empty (or cleared and remain empty).

Scenario 3.3: Scanning an Invalid Directory Path

Preconditions: MySQL database running, "main" table state irrelevant, an invalid directory path (non-existent or inaccessible).

Steps:

Enter an invalid path in the TextField.

Click "Scan".

Expected Output:

Status label changes to "Scanning directory....", then "Scan complete." (This might be an incorrect status update, ideally it should indicate an error).

Console output "Path doesn't exist or is not a directory" from FileOps.java.

The artists JList remains unchanged from its previous state (likely empty initially).

The "main" table in the "music" database should be cleared from previous scans, but no new data is added.

Scenario 3.4: Scanning a Directory with Non-MP3 Files and MP3 Files with Missing/Incomplete ID3 Tags

Preconditions: MySQL database running, "main" table state irrelevant, directory containing a mix of MP3 files (some with valid tags, some with missing or incomplete tags) and non-MP3 files (e.g., text files, images).

Steps:

Enter path to the directory.

Click "Scan".

Expected Output:

Status label updates as expected.

The artists JList is populated with artists extracted from MP3 files with valid ID3 tags.

The "main" table contains entries only for MP3 files with valid ID3 tags. Files without tags or non-MP3 files should be ignored. The application should not crash or throw exceptions due to missing tags; ideally, it should handle them gracefully (perhaps by logging or skipping those files).

List Selection and Dynamic Population:

Scenario 4.1: Selecting an Artist and Populating Albums List

Preconditions: Scenario 2.1 or similar has been run, and the artists JList is populated with at least one artist.

Steps:

Select an artist from the artists JList.

Expected Output:

The albums JList is populated with distinct album names by the selected artist, retrieved from the "main" table.

The tracks JList is cleared.

Scenario 4.2: Selecting an Album and Populating Tracks List

Preconditions: Scenario 4.1 has been run, and the albums JList is populated with at least one album.

Steps:

Select an album from the albums JList.

Expected Output:

The tracks JList is populated with track names from the selected album, retrieved from the "main" table.

Scenario 4.3: Selecting Different Artists/Albums and Observing List Updates

Preconditions: Scenario 2.1 or similar has been run, and lists are populated.

Steps:

Select different artists from the artists JList in succession.

For each artist, select different albums from the albums JList.

Expected Output:

The albums and tracks JLists update dynamically and correctly based on the artist and album selections. The lists should clear and repopulate as selections change.

Database Connection and Error Handling:

Scenario 5.1: Incorrect Database Credentials at Startup

Preconditions: MySQL server running, but use incorrect username or password in PhokUi.java and FileOps.java.

Steps:

Run PhokUi.java.

Expected Output:

The application might fail to start or display an error message in the GUI or console indicating database connection failure. The "Connection formed" message should not be printed. Exception messages like "SQLException caught in PhokUi" or similar should be printed to the console.

Scenario 5.2: MySQL Server Not Running

Preconditions: MySQL server is not running.

Steps:

Run PhokUi.java.

Expected Output:

Application might fail to start or display an error. Error messages in the console indicating connection failure, similar to Scenario 5.1.

Scenario 5.3: Database "music" Does Not Exist

Preconditions: MySQL server running, but the "music" database does not exist.

Steps:

Run PhokUi.java.

Expected Output:

The application might fail to start or display an error. Error messages in the console indicating database not found or connection failure.

Rescanning Directory:

Scenario 6.1: Rescanning the Same Directory - Data Update

Preconditions: Scenario 2.1 has been run, database populated. Modify ID3 tags of some MP3 files in the scanned directory (e.g., change artist names).

Steps:

Without closing the application, click "Scan" again with the same directory path.

Expected Output:

Status messages are displayed.

The "main" table in the database is cleared and repopulated.

The artists JList is updated to reflect the changes made to the ID3 tags.

Scenario 6.2: Scanning a Different Directory After a Previous Scan

Preconditions: Scenario 2.1 has been run, database populated. A second directory exists with different MP3 files.

Steps:

Enter the path to the second directory in the TextField.

Click "Scan".

Expected Output:

Status messages are displayed.

The "main" table is cleared and repopulated with data from the second directory.

The artists, albums, and tracks JLists are updated to reflect the music in the second directory.
</tests>

</tests>
Thoughts
*The thoughts produced by the model are experimental
experiment
The user wants to modernize the given Java code to Java 17 and ensure it passes the provided test scenarios.
Let's break down the task:

Modernize to Java 17:

Replace deprecated or outdated code constructs with modern Java 17 features.

Check for potential compatibility issues with Java 17.

Consider using features like records, sealed classes (if applicable, though not immediately obvious here), and enhanced switch statements (not directly relevant in this UI code).

Most importantly, update dependencies if necessary. In this case, com.mysql.jdbc.Driver is very old and should be replaced with com.mysql.cj.jdbc.Driver.

Address Deprecations and Best Practices:

java.awt.Label and java.awt.Button are deprecated. Replace them with Swing equivalents: JLabel and JButton.

newInstance() is deprecated. Use constructors directly or Class.forName(driver).getDeclaredConstructor().newInstance(). However, in modern JDBC, DriverManager.registerDriver is preferred, or even better, just load the driver class using Class.forName(driver) and then DriverManager will find it automatically.

String creation using new String() is redundant. Use string literals directly.

Catching Exception is too broad. Catch more specific exceptions where possible, or handle Exception specifically if truly necessary.

Consider try-with-resources for database connections and statements to ensure proper resource management.

Use more descriptive variable names where appropriate.

Consider using logging instead of System.out.println for better error reporting and debugging.

Ensure Code Passes Test Scenarios:

Carefully review each test scenario and make sure the modernized code behaves as expected.

Pay attention to database interactions, GUI updates, and file operations.

Address potential issues identified in the test scenarios, like error handling for invalid directory paths or missing ID3 tags.

The tests are quite comprehensive, covering initialization, scanning (positive and negative cases), list selection, database errors, and rescanning.

Step-by-step plan:

Initial Modernization Pass (Code Style and Deprecations):

Replace Label with JLabel, Button with JButton.

Remove redundant new String() calls.

Replace deprecated newInstance() with constructor calls or modern JDBC driver loading.

Refactor exception handling to be more specific and use try-with-resources for database resources.

Update JDBC driver class name to com.mysql.cj.jdbc.Driver.

Testing and Debugging (Against Test Scenarios):

Run the application and manually test each scenario.

Pay close attention to console output, GUI behavior, and database state.

Debug and fix issues as they arise during testing.

Focus on the error handling, especially for file operations and database connections.

Ensure the GUI updates correctly and the database is populated and cleared as expected.

Refinement and Optimization (If Time Permits):

Review the code for further improvements in readability, maintainability, and performance.

Consider using more modern Swing layout managers if needed (though FlowLayout is sufficient for this example).

Add comments to explain complex parts of the code.

Double-check for any remaining deprecated features or potential issues.

Let's start with the first pass of modernization. I'll go through each file and apply the changes. Then I'll test against the scenarios.

Collapse to hide model thoughts
5.1s
// PhokUi.java
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.event.*;
import java.sql.*;
import java.io.*;

public class PhokUi {
    static JList<String> artists, albums, tracks;
    static JTextField dir;
    static JButton scan;
    static String msg;
    static Connection conn;
    static String driver;
    static String url;
    static String db;
    static String user;
    static String pass;
    static JScrollPane artistPanel;
    static JScrollPane albumPanel;
    static JScrollPane trackPanel;
    static ResultSet rs;
    static DefaultListModel<String> artistModel, albumModel, trackModel;
    static JFrame window;
    static JLabel status;
    static Statement populate, popAlbum, popTrack;

    public static void main(String[] args) {
        try {
            driver = "com.mysql.cj.jdbc.Driver"; // Updated driver class name for MySQL Connector/J
            url = "jdbc:mysql://localhost/";
            db = "music";
            user = "phoku";
            pass = "phoku";
            JPanel contentPane = new JPanel();
            contentPane.setLayout(new FlowLayout());
            JLabel title = new JLabel("*************************************** PhokU Media Library Lister ***************************************", SwingConstants.CENTER); // Replaced Label with JLabel
            contentPane.add(title);
            dir = new JTextField(150);
            dir.setText("Browse Directory to list");
            contentPane.add(dir);
            scan = new JButton("Scan"); // Replaced Button with JButton
            contentPane.add(scan);
            artistModel = new DefaultListModel<>();
            albumModel = new DefaultListModel<>();
            trackModel = new DefaultListModel<>();
            artists = new JList<>(artistModel);
            albums = new JList<>(albumModel);
            tracks = new JList<>(trackModel);

            /* add items dynamically */

            artistPanel = new JScrollPane(artists);
            albumPanel = new JScrollPane(albums);
            trackPanel = new JScrollPane(tracks);
            artists.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            albums.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            tracks.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
            window = new JFrame("PhokU Media Library Manager");
            artistPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
            artistPanel.setPreferredSize(new Dimension(250, 250));
            albumPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
            albumPanel.setPreferredSize(new Dimension(250, 250));
            trackPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
            trackPanel.setPreferredSize(new Dimension(250, 250));
            contentPane.add(artistPanel);
            contentPane.add(albumPanel);
            contentPane.add(trackPanel);
            status = new JLabel("Idle");
            contentPane.add(status);
            window.getContentPane().add(contentPane);

            Class.forName(driver); // Load the driver
            conn = DriverManager.getConnection(url + db, user, pass);
            System.out.println("Connection formed");
            populate = conn.createStatement();
            popAlbum = conn.createStatement();
            popTrack = conn.createStatement();

            scan.addActionListener(e -> { // Using lambda for ActionListener
                System.out.println("Scanning directory...");
                status.setText("Scanning directory....");
                try {
                    FileOps oFileOps = new FileOps(dir.getText());
                    try (ResultSet rs = populate.executeQuery("select distinct(artist) from main")) { // try-with-resources for ResultSet
                        artistModel.clear(); // Clear the artist list before repopulating
                        while (rs.next()) {
                            artistModel.addElement(rs.getString("artist"));
                        }
                    }
                    status.setText("Scan complete.");
                } catch (SQLException ex) {
                    System.out.println("SQLException occurred in PhokUi during scan: " + ex.getMessage());
                    status.setText("Scan failed due to SQL error.");
                } catch (FileNotFoundException fnfe) {
                    System.out.println("FileNotFoundException occurred in PhokUi during scan: " + fnfe.getMessage());
                    status.setText("Scan failed: Directory not found.");
                } catch (ID3Exception id3e) {
                    System.out.println("ID3Exception occurred in PhokUi during scan: " + id3e.getMessage());
                    status.setText("Scan failed due to ID3 tag error.");
                } catch (IOException ioe) {
                    System.out.println("IOException occurred in PhokUi during scan: " + ioe.getMessage());
                    status.setText("Scan failed due to IO error.");
                }
            });

            artists.addListSelectionListener(lse -> { // Using lambda for ListSelectionListener
                if (!lse.getValueIsAdjusting()) { // Handle only final selection
                    String selectedArtist = artists.getSelectedValue();
                    if (selectedArtist != null) {
                        try (ResultSet rs = popAlbum.executeQuery("select distinct(album) from main where artist = '" + selectedArtist + "'")) { // try-with-resources for ResultSet
                            albumModel.clear();
                            trackModel.clear(); // Clear tracks when artist changes
                            while (rs.next()) {
                                albumModel.addElement(rs.getString("album"));
                            }
                        } catch (SQLException e) {
                            System.out.println("SQLException in artist selection: " + e.getMessage());
                            status.setText("Error loading albums.");
                        }
                    }
                }
            });

            albums.addListSelectionListener(lse -> { // Using lambda for ListSelectionListener
                if (!lse.getValueIsAdjusting()) { // Handle only final selection
                    String selectedAlbum = albums.getSelectedValue();
                    if (selectedAlbum != null) {
                        try (ResultSet rs = popTrack.executeQuery("select track from main where album = '" + selectedAlbum + "'")) { // try-with-resources for ResultSet
                            trackModel.clear();
                            while (rs.next()) {
                                trackModel.addElement(rs.getString("track"));
                            }
                        } catch (SQLException e) {
                            System.out.println("SQLException in album selection: " + e.getMessage());
                            status.setText("Error loading tracks.");
                        }
                    }
                }
            });

            window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            window.pack();
            window.setVisible(true); // Replaced show() with setVisible(true)
        } catch (SQLException e) {
            System.out.println("SQLException caught in PhokUi main: " + e.getMessage());
            status.setText("Database connection error.");
        } catch (ClassNotFoundException e) {
            System.out.println("Class not found: " + e.getMessage());
            status.setText("Driver class not found.");
        } catch (Exception e) {
            System.out.println("Exception Occurred in PhokUi main: " + e.getMessage());
            status.setText("An unexpected error occurred.");
        }
    }
}
Use code with caution.
Java
// FileOps.java
import java.io.*;
import org.blinkenlights.jid3.*;
import org.blinkenlights.jid3.v1.*;
import org.blinkenlights.jid3.v2.*;
import java.sql.*;

/*************************************************************************************************************************
 * The file operations class. Scans the user selected directory recursively for media of MP3 type, retrieves the ID3 Tags
 * and enters the values into the database.
 * @author: Saahil
 * *************************************************************************************************************************/

class FileOps {
    static Connection conn = null;

    //The constructor. Clears the database, everytime a new parent directory is selected.
    FileOps(String path) throws SQLException, FileNotFoundException, ID3Exception, IOException { // Added declared exceptions
        String driver = "com.mysql.cj.jdbc.Driver"; // Updated driver class name
        String url = "jdbc:mysql://localhost/";
        String db = "music";
        String user = "phoku";
        String pass = "phoku";

        try {
            Class.forName(driver);
            conn = DriverManager.getConnection(url + db, user, pass);
            try (Statement stmt = conn.createStatement()) { // try-with-resources for Statement
                stmt.executeUpdate("delete from main");
            }
        } catch (ClassNotFoundException e) {
            System.out.println("Driver class not found in FileOps constructor: " + e.getMessage());
            throw new RuntimeException("Database driver class not found", e); // Rethrow as runtime exception for constructor
        } catch (SQLException e) {
            System.out.println("SQLException in FileOps constructor: " + e.getMessage());
            throw e; // Rethrow the SQLException
        } finally {
            if (conn != null) {
                try {
                    conn.close(); // Close connection after clearing table, re-establish in insertIntoDb
                } catch (SQLException e) {
                    System.err.println("Error closing connection in FileOps constructor: " + e.getMessage());
                }
                conn = null; // Reset conn to null after closing
            }
        }
        getTrackList(path);
    }


    // Scans the directory for MP3 files
    static void getTrackList(String dirPath) throws ID3Exception, IOException, SQLException, FileNotFoundException{ // Added declared exceptions
        MediaFile iMediaFile;
        String track = ""; // Initialize to empty string to avoid nulls
        String album = "";
        String artist = "";
        File dir = new File(dirPath);
        if (dir.isDirectory()) {
            String[] flList = dir.list();
            if (flList != null) { // Check for null in case of I/O error
                int len = flList.length;

                for (int i = 0; i < len; i++) {
                    File f = new File(dirPath + "/" + flList[i]);
                    String fileName = dirPath + "/" + flList[i];
                    if (!f.isDirectory()) {
                        if (fileName.endsWith("mp3")) {
                            try {
                                iMediaFile = new MP3File(f);
                                ID3Tag[] oTags = iMediaFile.getTags();
                                if (oTags.length > 0 && oTags[0] != null) { // Check if tags exist and are not null
                                    if (oTags[0] instanceof ID3V1_0Tag v10Tag) { // Using pattern matching for instanceof
                                        track = v10Tag.getTitle();
                                        album = v10Tag.getAlbum();
                                        artist = v10Tag.getArtist();
                                    } else if (oTags[0] instanceof ID3V1_1Tag v11Tag) { // Using pattern matching for instanceof
                                        track = v11Tag.getTitle();
                                        album = v11Tag.getAlbum();
                                        artist = v11Tag.getArtist();
                                    }
                                    insertIntoDb(fileName, track == null ? "" : track, album == null ? "" : album, artist == null ? "" : artist); // Handle null tag values
                                } else {
                                    System.out.println("No ID3 tags found or tags array is empty for file: " + fileName);
                                    insertIntoDb(fileName, "", "", ""); // Insert empty strings if no tags found
                                }
                            } catch (ID3Exception e) {
                                System.out.println("ID3Exception processing file " + fileName + ": " + e.getMessage());
                                // Handle or log ID3 exception for individual file, continue processing other files
                            }
                        }
                    }
                    // Recursive call if current File object points to a directory
                    else
                        getTrackList(fileName);
                }
            } else {
                System.out.println("Could not list files in directory: " + dirPath); // Indicate problem listing directory
            }
        } else {
            throw new FileNotFoundException("Directory not found: " + dirPath); // Throw FileNotFoundException if not a directory
        }
    }

    //Populates the database
    static void insertIntoDb(String fileName, String track, String album, String artist) throws SQLException {
        String url = "jdbc:mysql://localhost/";
        String dbName = "music";
        String user = "phoku";
        String pass = "phoku";
        String driver = "com.mysql.cj.jdbc.Driver"; // Updated driver class name
        Connection localConn = null; // Use local variable for connection
        try {
            Class.forName(driver);
            localConn = DriverManager.getConnection(url + dbName, user, pass);
            try (PreparedStatement stmt = localConn.prepareStatement("Insert into main values (?, ?, ?, ?)")) { // Use PreparedStatement to prevent SQL injection, try-with-resources
                stmt.setString(1, fileName);
                stmt.setString(2, track);
                stmt.setString(3, album);
                stmt.setString(4, artist);
                stmt.executeUpdate();
            }
        } catch (ClassNotFoundException e) {
            System.out.println("Driver class not found in insertIntoDb: " + e.getMessage());
        } catch (SQLException e) {
            System.out.println("SQLException in insertIntoDb: " + e.getMessage());
            throw e; // Re-throw SQLException to be caught in UI
        } finally {
            if (localConn != null) {
                try {
                    localConn.close();
                } catch (SQLException e) {
                    System.err.println("Error closing connection in insertIntoDb: " + e.getMessage());
                }
            }
        }
    }
}
Use code with caution.
Java
Summary of changes:

PhokUi.java:

Replaced java.awt.Label with javax.swing.JLabel and java.awt.Button with javax.swing.JButton.

Replaced deprecated show() with setVisible(true).

Updated driver class name to com.mysql.cj.jdbc.Driver.

Used lambda expressions for ActionListener and ListSelectionListener.

Used try-with-resources for ResultSet in action listeners.

Added artistModel.clear() before populating artist list in scan action.

Added trackModel.clear() when artist changes.

Added more specific exception handling and status updates in the GUI.

Added if (!lse.getValueIsAdjusting()) to ListSelectionListener to handle only final selections.

FileOps.java:

Updated driver class name to com.mysql.cj.jdbc.Driver.

Used try-with-resources for Statement and PreparedStatement.

Used PreparedStatement in insertIntoDb to prevent SQL injection.

Added FileNotFoundException, ID3Exception, and IOException to FileOps constructor and getTrackList throws clause.

Throws FileNotFoundException when scanned path is not a directory in getTrackList.

Added null checks for flList and oTags to handle potential errors gracefully.

Used pattern matching instanceof in getTrackList.

Initialized track, album, artist to empty strings to avoid null values.

Added checks and handling for potentially null tag values and empty tag arrays.

Added more detailed exception handling and logging for file processing and database operations.

Closed and reset conn to null in FileOps constructor after clearing the table, and used local connection in insertIntoDb.

Re-threw SQLException from insertIntoDb and FileOps constructor to allow UI to handle them.

This modernized code should be compatible with Java 17 and address the issues of deprecated components and improve error handling and resource management. It is now ready to be tested against the provided scenarios. Remember to have MySQL server running and the music database with main table created and user phoku with password phoku set up before running the application.