user_message: Analyze the code below, including its purpose, inputs, and expected outputs. Then, create a comprehensive test suite consisting of unit and/or integration tests that fully cover all aspects of the code's functionality, ensuring it produces a valid solution. Consider that the code will be transformed for the Java 17 language.

File 1:
<phokUi.java>
import java.awt.;
import javax.swing.;
import java.awt.event.;
import javax.swing.event.;
import java.sql.;
import java.io.;

public class PhokUi {
static JList artists,albums,tracks;
static TextField dir;
static Button scan;
static String msg;
static Connection conn;
static String driver;
static String url;
static String db;
static String user;
static String pass;
static JScrollPane artistPanel;
static JScrollPane albumPanel;
static JScrollPane trackPanel;
static ResultSet rs;
static DefaultListModel artistModel, albumModel, trackModel;
static JFrame window;
static JLabel status;
static Statement populate, popAlbum, popTrack;

public static void main(String[] args) throws SQLException{
	try {
		driver = new String();
		driver = "com.mysql.jdbc.Driver";
		url = new String();
		url = "jdbc:mysql://localhost/";
		db = new String();
		db = "music";
		user = new String();
		user = "phoku";
		pass = new String();
		pass = "phoku";
		JPanel contentPane = new JPanel();
		contentPane.setLayout(new FlowLayout());
		Label title = new Label("*************************************** PhokU Media Library Lister ***************************************",Label.CENTER);
		contentPane.add(title);
		dir = new TextField(150);
		dir.setText("Browse Directory to list");
		contentPane.add(dir);
		scan = new Button("Scan");
		contentPane.add(scan);
		artistModel = new DefaultListModel();
		albumModel = new DefaultListModel();
		trackModel = new DefaultListModel();
		artists = new JList(artistModel);
		albums = new JList(albumModel);
		tracks = new JList(trackModel);

		/* add items dynamically */
	
		artistPanel = new JScrollPane(artists);
		albumPanel = new JScrollPane(albums);
		trackPanel = new JScrollPane(tracks);
		artists.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		albums.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		tracks.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		window = new JFrame("PhokU Media Library Manager");
		artistPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		artistPanel.setPreferredSize(new Dimension(250, 250));
		albumPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		albumPanel.setPreferredSize(new Dimension(250, 250));
		trackPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		trackPanel.setPreferredSize(new Dimension(250, 250));
		contentPane.add(artistPanel);
		contentPane.add(albumPanel);
		contentPane.add(trackPanel);
		status = new JLabel("Idle");
		contentPane.add(status);
		window.getContentPane().add(contentPane);
		Class.forName(driver).newInstance();
		conn = DriverManager.getConnection(url+db, user, pass);
		System.out.println("Connection formed");
		populate = conn.createStatement();
		popAlbum = conn.createStatement();
		popTrack = conn.createStatement();
		scan.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent ae) {
				System.out.println("Scanning directory...");
				status.setText("Scanning directory....");
				try {
				FileOps oFileOps = new FileOps(dir.getText());
				rs = populate.executeQuery("select distinct(artist) from main");
				while (rs.next()) {
					artistModel.addElement(rs.getString("artist"));
				}
				status.setText("Scan complete.");
				} catch (SQLException e) {System.out.println("SQLException occured in PhokUi");}
			}
		});
		artists.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent lse) {
				try {
				rs = popAlbum.executeQuery("select distinct(album) from main where artist = '" + artistModel.getElementAt(artists.getSelectedIndex()).toString() + "'");
				trackModel.clear();
				albumModel.clear();
				while (rs.next()) {
					albumModel.addElement(rs.getString("album"));
				}
				} catch (SQLException e) { }
			}
		});
		albums.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent lse) {
				try {
				rs = popTrack.executeQuery("select track from main where album = '" + albumModel.getElementAt(albums.getSelectedIndex()).toString() + "'");
				trackModel.clear();
				while (rs.next()) {
					trackModel.addElement(rs.getString("track"));
				}
				} catch (SQLException e) { }
			}
		});
	}
	catch (SQLException e) {System.out.println("SQLException caught in PhokUi"); }
	catch (ClassNotFoundException e) {System.out.println("Class not found"); }
	catch (Exception e) {System.out.println("Exception Occured in PhokUi"); }
	window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	window.pack();
	window.show();
}
Use code with caution.
}
</phokUi.java>

File 2:
<FileOps.java>
import java.io.;
import org.blinkenlights.jid3.;
import org.blinkenlights.jid3.v1.;
import org.blinkenlights.jid3.v2.;
import java.sql.*;

/*************************************************************************************************************************

The file operations class. Scans the user selected directory recursively for media of MP3 type, retrieves the ID3 Tags

and enters the values into the database.

@author: Saahil

*************************************************************************************************************************/

class FileOps {
static Connection conn = null;

//The constructor. Clears the database, everytime a new parent directory is selected. 
FileOps(String path) throws SQLException {
	String driver = "com.mysql.jdbc.Driver";
	String url = "jdbc:mysql://localhost/";
	String db = "music";
	String user = "phoku";
	String pass = "phoku";

	try {
		Class.forName(driver).newInstance();
		conn = DriverManager.getConnection(url+db, user, pass);
		Statement stmt = conn.createStatement();
		stmt.executeUpdate("delete from main");
		conn.close();
		getTrackList(path);
	}
	catch (Exception e) {}
}


// Scans the directory for MP3 files
static void getTrackList(String dirPath) throws ID3Exception, IOException, SQLException{
	MediaFile iMediaFile;
	String track = new String();
	String album = new String();
	String artist = new String();
	try {
		File dir = new File(dirPath);
		if (dir.isDirectory()) {
			String[] flList = dir.list();
			int len = flList.length;

			for (int i = 0; i < len; i++) {
				File f = new File(dirPath + "/" + flList[i]);
				String fileName = dirPath + "/" + flList[i];
				if (!f.isDirectory()) {
					if (fileName.endsWith("mp3")){
						iMediaFile = new MP3File(f);
						ID3Tag[] oTags = iMediaFile.getTags();
						if (oTags[0] instanceof ID3V1_0Tag) {
							ID3V1_0Tag oActTag = (ID3V1_0Tag)oTags[0];
							track = oActTag.getTitle();
							album = oActTag.getAlbum();
							artist = oActTag.getArtist();
							insertIntoDb(fileName, track, album, artist);
						}
						else if (oTags[0] instanceof ID3V1_1Tag) {
							ID3V1_1Tag oActTag = (ID3V1_1Tag)oTags[0];
							track = oActTag.getTitle();
							album = oActTag.getAlbum();
							artist = oActTag.getArtist();
							insertIntoDb(fileName, track, album, artist);
						}
					}
				}
				// Recursive call if current File object points to a directory
				else
					getTrackList(fileName);
			}
		}
		else 
			throw new FileNotFoundException();
		
		}
	catch (IOException e) {
		System.out.println("Path doesn't exist or is not a directory");
	}
	catch(ID3Exception e) {System.out.println("Other");}
}

//Populates the database 
static void insertIntoDb(String fileName, String track, String album, String artist) throws SQLException  {
	String url = "jdbc:mysql://localhost/";
	String dbName = "music";
	String user = "phoku";
	String pass = "phoku";
	String driver = "com.mysql.jdbc.Driver";
	try {
		Class.forName(driver);
		conn = DriverManager.getConnection(url+dbName, user, pass);
		Statement stmt = conn.createStatement();
		stmt.executeUpdate("Insert into main values ('" + fileName + "', '" + track + "', '" + album + "', '" + artist + "')");
		conn.close();
	}
	catch(ClassNotFoundException e) {}
	catch(SQLException e) {}
	catch(Exception e) {}
}
Use code with caution.
}

</FileOps.java>

assistant_reasoning: The user wants me to analyze two Java files: PhokUi.java and FileOps.java.
Then, I need to create a comprehensive test suite for these files.
The analysis should cover:

Purpose: What does each class do?

Inputs: What inputs does each class/method take?

Expected Outputs: What are the expected results of the code execution?

After the analysis, I need to design a test suite. The test suite should:

Be comprehensive and cover all aspects of the code's functionality.

Ensure the code produces a valid solution.

Include unit and/or integration tests.

Consider Java 17 compatibility (although the code seems to be old style Java).

Analysis of PhokUi.java:

Purpose: This class creates a GUI application (PhokU Media Library Lister) to display artists, albums, and tracks from a music library. It scans a user-specified directory for MP3 files, extracts ID3 tag information, and stores it in a MySQL database ("music"). The GUI then allows users to browse artists, albums, and tracks from the database.

Inputs:

User input: Directory path from the TextField.

User interactions: Clicking the "Scan" button, selecting items from the JLists (artists, albums, tracks).

Expected Outputs:

GUI display: Lists of artists, albums, and tracks in JLists.

Database updates: The "music" database should be populated with music information from scanned MP3 files.

Status messages in the JLabel to indicate scanning progress.

Dependencies:

FileOps class for file scanning and database population.

MySQL database and JDBC driver.

jid3lib library (implicitly used by FileOps).

Functionality Breakdown:

GUI Initialization: Sets up the JFrame, JPanels, JLists, Buttons, TextFields, and Labels.

Database Connection: Establishes a connection to the MySQL database "music".

"Scan" Button Action:

Reads the directory path from the TextField.

Creates a FileOps object, which triggers scanning and database population.

Queries the database to get distinct artists and populates the artists JList.

Updates the status JLabel.

Artist Selection Listener:

When an artist is selected in the artists JList, it queries the database to get albums for that artist and populates the albums JList.

Album Selection Listener:

When an album is selected in the albums JList, it queries the database to get tracks for that album and populates the tracks JList.

Analysis of FileOps.java:

Purpose: This class is responsible for scanning a directory for MP3 files, reading ID3 tags, and inserting the extracted information into the "music" database.

Inputs:

Constructor: Takes a directory path (String path) as input.

getTrackList(String dirPath): Takes a directory path to scan.

insertIntoDb(String fileName, String track, String album, String artist): Takes track information and file name to insert into the database.

Expected Outputs:

Database updates: The "main" table in the "music" database should be populated with track, album, and artist information from scanned MP3 files.

Dependencies:

jid3lib library for reading ID3 tags.

MySQL database and JDBC driver.

Functionality Breakdown:

Constructor FileOps(String path):

Connects to the MySQL database.

Clears the "main" table in the database.

Calls getTrackList(path) to start scanning.

getTrackList(String dirPath):

Recursively scans the directory specified by dirPath.

For each MP3 file found:

Reads ID3 V1.0 or V1.1 tags using jid3lib.

Extracts track, album, and artist information.

Calls insertIntoDb to store the information in the database.

insertIntoDb(String fileName, String track, String album, String artist):

Connects to the MySQL database.

Inserts a new row into the "main" table with the provided track information.

Test Suite Design Considerations:

Database Dependency: Both classes heavily rely on a MySQL database. Tests will need to interact with a database. Consider using a test database (e.g., an in-memory database like H2, or a dedicated test MySQL instance) to avoid affecting the production database. For simplicity and to match the original code, I will assume a MySQL database is used for testing, but the test setup should ensure a clean state before each test.

File System Interaction: FileOps interacts with the file system to scan directories and read MP3 files. Test cases will need to create test directories and MP3 files for scanning. Mocking the file system interaction might be complex but could be considered for unit tests of FileOps. For integration tests, using actual files in a test directory is more realistic.

GUI Testing: PhokUi is a GUI application. Testing GUI functionality can be challenging. For this case, focus on testing the logic behind GUI interactions, such as the "Scan" action and list selection listeners, rather than pixel-perfect GUI rendering. Consider using headless AWT for running GUI tests without a display. For simplicity and scope, I'll focus more on the data processing logic triggered by GUI events.

Unit Tests vs. Integration Tests:

Unit Tests for FileOps: Could focus on testing getTrackList and insertIntoDb in isolation. This might involve mocking database connections and file system operations.

Integration Tests for PhokUi and FileOps: Test the interaction between PhokUi and FileOps, including GUI actions triggering database updates and data display. This will involve setting up a test database, test files, and running the PhokUi application (possibly in a headless mode for automated testing).

Test Suite Structure (Conceptual):

Database Setup:

Create a test database (or use a dedicated test schema in the "music" database).

Create the "main" table if it doesn't exist (schema should be defined).

Ensure the test database is clean before each test run.

Test Files Setup:

Create a test directory with a structure of MP3 files and subdirectories to simulate a music library.

Create sample MP3 files with ID3 tags (using a library to generate them or pre-made test files).

Unit Tests for FileOps:

Test getTrackList with different directory structures (empty directory, directory with MP3s, directory with subdirectories, directory with non-MP3 files).

Test insertIntoDb to verify data insertion into the database.

Integration Tests for PhokUi:

Test "Scan" button action:

Verify that clicking "Scan" with a valid directory path populates the database and the artist list in the GUI.

Verify that clicking "Scan" with an invalid directory path (or no directory) handles errors gracefully (e.g., status message update).

Test artist selection:

Verify that selecting an artist populates the album list correctly.

Test album selection:

Verify that selecting an album populates the track list correctly.

Test error handling (e.g., database connection errors, ID3 tag reading errors, file system errors).

Java 17 Considerations:
The code is written in an older style of Java. For Java 17:

No major language features are directly relevant to the core logic.

JDBC driver: Ensure compatibility with Java 17. The com.mysql.jdbc.Driver is deprecated; consider using com.mysql.cj.jdbc.Driver. Update driver string and dependencies accordingly.

No significant code changes are strictly needed for Java 17 compatibility for the core logic. However, modernizing practices like using try-with-resources for database connections and streams could be considered for improved code style and resource management, but this is outside the scope of testing the given code. The focus is on testing the functionality as is, even if the code is not modern.

Let's start creating the test suite structure and test cases. I will focus on integration tests first as they are more critical for verifying the overall functionality of the application. I will assume a MySQL database setup and focus on testing the core logic of scanning, database interaction, and GUI updates.

assistant_answer: import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import java.io.File;
import java.io.IOException;
import java.sql.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import javax.swing.*;
import javax.swing.event.ListSelectionEvent;

// Test suite for PhokUi and FileOps classes
@TestInstance(TestInstance.Lifecycle.PER_CLASS) // Allows @BeforeAll and @AfterAll to be non-static
public class PhokUiFileOpsTest {

    private static final String TEST_DB_URL = "jdbc:mysql://localhost/test_music"; // Assuming a test database
    private static final String DB_USER = "phoku"; // Replace with your test DB user
    private static final String DB_PASS = "phoku"; // Replace with your test DB password
    private static final String TEST_DIRECTORY = "test_music_dir";
    private static Connection testConn;
    private PhokUi phokUiApp;

    @BeforeAll
    public void setupDatabase() throws SQLException, ClassNotFoundException {
        // Initialize database connection for test setup and cleanup
        Class.forName("com.mysql.cj.jdbc.Driver"); // Modern MySQL driver
        testConn = DriverManager.getConnection(TEST_DB_URL, DB_USER, DB_PASS);

        // Create test database and table if not exist (or ensure they are clean)
        try (Statement stmt = testConn.createStatement()) {
            stmt.executeUpdate("CREATE DATABASE IF NOT EXISTS test_music");
            stmt.executeUpdate("USE test_music");
            stmt.executeUpdate("DROP TABLE IF EXISTS main");
            stmt.executeUpdate("CREATE TABLE main (fileName VARCHAR(255), track VARCHAR(255), album VARCHAR(255), artist VARCHAR(255))");
        }
    }

    @BeforeEach
    public void setupTestEnvironment() throws IOException, SQLException {
        // Clean up test directory and database before each test
        cleanupTestDirectory();
        clearDatabaseTable();

        // Initialize PhokUi for each test (if needed, or manage lifecycle manually)
        // For GUI tests, it might be better to instantiate only when needed for specific tests
    }

    @AfterEach
    public void teardownTestEnvironment() throws IOException, SQLException {
        // Cleanup after each test if needed, but BeforeEach already handles cleanup for fresh state
        // cleanupTestDirectory(); // Already done in beforeEach for fresh state
        // clearDatabaseTable();    // Already done in beforeEach for fresh state
    }

    @AfterAll
    public void teardownDatabase() throws SQLException {
        if (testConn != null && !testConn.isClosed()) {
            testConn.close();
        }
    }

    private void cleanupTestDirectory() throws IOException {
        Path testDirPath = Paths.get(TEST_DIRECTORY);
        if (Files.exists(testDirPath)) {
            Files.walk(testDirPath)
                 .sorted(java.util.Comparator.reverseOrder())
                 .map(Path::toFile)
                 .forEach(File::delete);
        }
        Files.createDirectories(testDirPath); // Re-create empty directory
    }

    private void clearDatabaseTable() throws SQLException {
        try (Statement stmt = testConn.createStatement()) {
            stmt.executeUpdate("USE test_music");
            stmt.executeUpdate("DELETE FROM main");
        }
    }

    private void createTestMP3File(String directory, String filename, String title, String album, String artist) throws IOException, SQLException {
        Path dirPath = Paths.get(directory);
        if (!Files.exists(dirPath)) {
            Files.createDirectories(dirPath);
        }
        File mp3File = new File(directory, filename);
        if (!mp3File.exists()) {
            mp3File.createNewFile();
        }

        try (MP3File mediaFile = new MP3File(mp3File)) {
            ID3V1_1Tag tag = new ID3V1_1Tag();
            tag.setTitle(title);
            tag.setAlbum(album);
            tag.setArtist(artist);
            mediaFile.setID3Tag(tag);
            mediaFile.sync();
        } catch (ID3Exception | IOException e) {
            throw new IOException("Error creating test MP3 file", e);
        }
    }


    @Test
    @DisplayName("Integration Test: Scan Directory and Populate Database")
    public void testScanDirectoryAndPopulateDatabase() throws Exception {
        // 1. Setup test directory with MP3 files
        createTestMP3File(TEST_DIRECTORY, "track1.mp3", "Track One", "Album A", "Artist X");
        createTestMP3File(TEST_DIRECTORY, "track2.mp3", "Track Two", "Album A", "Artist X");
        createTestMP3File(TEST_DIRECTORY, "track3.mp3", "Track Three", "Album B", "Artist Y");

        // 2. Create FileOps instance and trigger scan
        FileOps fileOps = new FileOps(TEST_DIRECTORY);

        // 3. Verify database content
        try (Statement stmt = testConn.createStatement()) {
            stmt.executeUpdate("USE test_music");
            ResultSet rs = stmt.executeQuery("SELECT * FROM main ORDER BY track");
            assertTrue(rs.next());
            assertEquals("Track One", rs.getString("track"));
            assertEquals("Album A", rs.getString("album"));
            assertEquals("Artist X", rs.getString("artist"));

            assertTrue(rs.next());
            assertEquals("Track Three", rs.getString("track"));
            assertEquals("Album B", rs.getString("album"));
            assertEquals("Artist Y", rs.getString("artist"));

            assertTrue(rs.next());
            assertEquals("Track Two", rs.getString("track"));
            assertEquals("Album A", rs.getString("album"));
            assertEquals("Artist X", rs.getString("artist"));

            assertFalse(rs.next()); // No more records
        }
    }

    @Test
    @DisplayName("Integration Test: PhokUi Scan Button Action")
    public void testPhokUiScanButtonAction() throws Exception {
        // 1. Setup test directory and MP3 files
        createTestMP3File(TEST_DIRECTORY, "test_track.mp3", "Test Track", "Test Album", "Test Artist");

        // 2. Initialize PhokUi application (headless, if possible for UI testing)
        PhokUi.main(new String[]{}); // Initialize UI. Consider refactoring main to allow programmatic init for testing.
        PhokUi.dir.setText(TEST_DIRECTORY);

        // 3. Simulate button click
        PhokUi.scan.getActionListeners()[0].actionPerformed(null); // Programmatically trigger action listener

        // Wait for scan to complete (using status label might be flaky, better to have a more robust signal if possible)
        Thread.sleep(1000); // Allow time for scanning and DB population - consider better synchronization

        // 4. Verify artist list is populated in GUI
        ListModel artistListModel = PhokUi.artists.getModel();
        assertEquals(1, artistListModel.getSize());
        assertEquals("Test Artist", artistListModel.getElementAt(0));

        // 5. Verify status label update
        assertEquals("Scan complete.", PhokUi.status.getText());

        // Cleanup UI resources if needed after test (window dispose etc.) - for this simple test, leaving it open is ok.
    }

    @Test
    @DisplayName("Integration Test: Artist Selection Populates Album List")
    public void testArtistSelectionPopulatesAlbumList() throws Exception {
        // 1. Setup test data (database already populated by previous test, or re-populate)
        clearDatabaseTable();
        createTestMP3File(TEST_DIRECTORY, "track1.mp3", "Track One", "Album A", "Artist X");
        createTestMP3File(TEST_DIRECTORY, "track2.mp3", "Track Two", "Album A", "Artist X");
        createTestMP3File(TEST_DIRECTORY, "track3.mp3", "Track Three", "Album B", "Artist X"); // Same artist, different album

        FileOps fileOps = new FileOps(TEST_DIRECTORY); // Scan to populate DB

        PhokUi.main(new String[]{}); // Initialize UI
        PhokUi.dir.setText(TEST_DIRECTORY);
        PhokUi.scan.getActionListeners()[0].actionPerformed(null);
        Thread.sleep(1000);

        // 2. Select "Artist X" in artist list (assuming it's the first element after scan)
        PhokUi.artists.setSelectedIndex(0); // Select the first artist
        ListSelectionListener artistListener = PhokUi.artists.getListSelectionListeners()[0];
        artistListener.valueChanged(new ListSelectionEvent(PhokUi.artists, 0, 0, false)); // Simulate selection event
        Thread.sleep(500); // Wait for album list to update

        // 3. Verify album list is populated with "Album A" and "Album B"
        ListModel albumListModel = PhokUi.albums.getModel();
        assertEquals(2, albumListModel.getSize());
        assertTrue(albumListModel.getElementAt(0).equals("Album A") || albumListModel.getElementAt(0).equals("Album B"));
        assertTrue(albumListModel.getElementAt(1).equals("Album A") || albumListModel.getElementAt(1).equals("Album B"));
        assertNotEquals(albumListModel.getElementAt(0), albumListModel.getElementAt(1)); // Ensure both are present and different.
    }


    @Test
    @DisplayName("Integration Test: Album Selection Populates Track List")
    public void testAlbumSelectionPopulatesTrackList() throws Exception {
        // 1. Setup test data (database already populated or re-populate)
        clearDatabaseTable();
        createTestMP3File(TEST_DIRECTORY, "track1.mp3", "Track One", "Album C", "Artist Z");
        createTestMP3File(TEST_DIRECTORY, "track2.mp3", "Track Two", "Album C", "Artist Z");
        createTestMP3File(TEST_DIRECTORY, "track3.mp3", "Track Three", "Album D", "Artist Z");

        FileOps fileOps = new FileOps(TEST_DIRECTORY); // Scan to populate DB

        PhokUi.main(new String[]{}); // Initialize UI
        PhokUi.dir.setText(TEST_DIRECTORY);
        PhokUi.scan.getActionListeners()[0].actionPerformed(null);
        Thread.sleep(1000);

        // Select Artist Z (assuming it's the first) and then Album C (assuming it's the first after artist selection)
        PhokUi.artists.setSelectedIndex(0);
        PhokUi.artists.getListSelectionListeners()[0].valueChanged(new ListSelectionEvent(PhokUi.artists, 0, 0, false));
        Thread.sleep(500);

        PhokUi.albums.setSelectedIndex(0); // Select first album
        ListSelectionListener albumListener = PhokUi.albums.getListSelectionListeners()[0];
        albumListener.valueChanged(new ListSelectionEvent(PhokUi.albums, 0, 0, false));
        Thread.sleep(500);

        // 3. Verify track list is populated with "Track One" and "Track Two"
        ListModel trackListModel = PhokUi.tracks.getModel();
        assertEquals(2, trackListModel.getSize());
        assertTrue(trackListModel.getElementAt(0).equals("Track One") || trackListModel.getElementAt(0).equals("Track Two"));
        assertTrue(trackListModel.getElementAt(1).equals("Track One") || trackListModel.getElementAt(1).equals("Track Two"));
        assertNotEquals(trackListModel.getElementAt(0), trackListModel.getElementAt(1));
    }

    @Test
    @DisplayName("Integration Test: Scan Empty Directory - No Database Entries, Empty Lists")
    public void testScanEmptyDirectory() throws Exception {
        cleanupTestDirectory(); // Ensure test directory is empty

        PhokUi.main(new String[]{});
        PhokUi.dir.setText(TEST_DIRECTORY);
        PhokUi.scan.getActionListeners()[0].actionPerformed(null);
        Thread.sleep(1000);

        // Verify database is empty
        try (Statement stmt = testConn.createStatement()) {
            stmt.executeUpdate("USE test_music");
            ResultSet rs = stmt.executeQuery("SELECT COUNT(*) FROM main");
            rs.next();
            assertEquals(0, rs.getInt(1)); // Count should be 0
        }

        // Verify GUI lists are empty
        assertEquals(0, PhokUi.artists.getModel().getSize());
        assertEquals(0, PhokUi.albums.getModel().getSize());
        assertEquals(0, PhokUi.tracks.getModel().getSize());
        assertEquals("Scan complete.", PhokUi.status.getText()); // Status should indicate completion
    }

    @Test
    @DisplayName("Integration Test: Scan Non-Directory Path - Handles Exception Gracefully")
    public void testScanNonDirectoryPath() throws Exception {
        Path nonDirPath = Paths.get(TEST_DIRECTORY, "not_a_directory.txt");
        Files.createFile(nonDirPath); // Create a file instead of directory

        PhokUi.main(new String[]{});
        PhokUi.dir.setText(nonDirPath.toString()); // Set text field to a file path
        PhokUi.scan.getActionListeners()[0].actionPerformed(null);
        Thread.sleep(1000);

        // Verify database is still empty (or unchanged from previous state, if any)
        try (Statement stmt = testConn.createStatement()) {
            stmt.executeUpdate("USE test_music");
            ResultSet rs = stmt.executeQuery("SELECT COUNT(*) FROM main");
            rs.next();
            assertEquals(0, rs.getInt(1)); // Assuming database was cleared in setup
        }

        // Verify GUI lists remain empty (or unchanged)
        assertEquals(0, PhokUi.artists.getModel().getSize());
        assertEquals(0, PhokUi.albums.getModel().getSize());
        assertEquals(0, PhokUi.tracks.getModel().getSize());
        assertEquals("Scan complete.", PhokUi.status.getText()); // Scan completes, but no files processed. Status update?
        // Status message might need refinement to indicate "no directory" or "no files found" more explicitly.
    }

    // Additional tests can be added for:
    // - Handling of different ID3 tag versions (V1.0, V1.1, V2 - if FileOps was designed for V2)
    // - Error handling for database connection failures (though setup/teardown covers basic connection)
    // - Performance tests if needed (for very large directories)
    // - UI responsiveness tests (if going beyond basic functionality)

}
